
F207ZG_CAN_NMEA2000.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f80  08000184  08000184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003104  08003104  00013104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800311c  0800311c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800311c  0800311c  0001311c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003124  08003124  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003124  08003124  00013124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003128  08003128  00013128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800312c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  2000000c  08003138  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  08003138  00020110  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008ca8  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a5b  00000000  00000000  00028cdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007e0  00000000  00000000  0002a738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000738  00000000  00000000  0002af18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ebbd  00000000  00000000  0002b650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008cf0  00000000  00000000  0004a20d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b905a  00000000  00000000  00052efd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010bf57  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f94  00000000  00000000  0010bfac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	2000000c 	.word	0x2000000c
 80001a0:	00000000 	.word	0x00000000
 80001a4:	080030ec 	.word	0x080030ec

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	; (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000010 	.word	0x20000010
 80001c0:	080030ec 	.word	0x080030ec

080001c4 <__aeabi_frsub>:
 80001c4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80001c8:	e002      	b.n	80001d0 <__addsf3>
 80001ca:	bf00      	nop

080001cc <__aeabi_fsub>:
 80001cc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080001d0 <__addsf3>:
 80001d0:	0042      	lsls	r2, r0, #1
 80001d2:	bf1f      	itttt	ne
 80001d4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80001d8:	ea92 0f03 	teqne	r2, r3
 80001dc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80001e0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80001e4:	d06a      	beq.n	80002bc <__addsf3+0xec>
 80001e6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80001ea:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80001ee:	bfc1      	itttt	gt
 80001f0:	18d2      	addgt	r2, r2, r3
 80001f2:	4041      	eorgt	r1, r0
 80001f4:	4048      	eorgt	r0, r1
 80001f6:	4041      	eorgt	r1, r0
 80001f8:	bfb8      	it	lt
 80001fa:	425b      	neglt	r3, r3
 80001fc:	2b19      	cmp	r3, #25
 80001fe:	bf88      	it	hi
 8000200:	4770      	bxhi	lr
 8000202:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000206:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800020a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800020e:	bf18      	it	ne
 8000210:	4240      	negne	r0, r0
 8000212:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000216:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800021a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800021e:	bf18      	it	ne
 8000220:	4249      	negne	r1, r1
 8000222:	ea92 0f03 	teq	r2, r3
 8000226:	d03f      	beq.n	80002a8 <__addsf3+0xd8>
 8000228:	f1a2 0201 	sub.w	r2, r2, #1
 800022c:	fa41 fc03 	asr.w	ip, r1, r3
 8000230:	eb10 000c 	adds.w	r0, r0, ip
 8000234:	f1c3 0320 	rsb	r3, r3, #32
 8000238:	fa01 f103 	lsl.w	r1, r1, r3
 800023c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000240:	d502      	bpl.n	8000248 <__addsf3+0x78>
 8000242:	4249      	negs	r1, r1
 8000244:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000248:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800024c:	d313      	bcc.n	8000276 <__addsf3+0xa6>
 800024e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000252:	d306      	bcc.n	8000262 <__addsf3+0x92>
 8000254:	0840      	lsrs	r0, r0, #1
 8000256:	ea4f 0131 	mov.w	r1, r1, rrx
 800025a:	f102 0201 	add.w	r2, r2, #1
 800025e:	2afe      	cmp	r2, #254	; 0xfe
 8000260:	d251      	bcs.n	8000306 <__addsf3+0x136>
 8000262:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000266:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800026a:	bf08      	it	eq
 800026c:	f020 0001 	biceq.w	r0, r0, #1
 8000270:	ea40 0003 	orr.w	r0, r0, r3
 8000274:	4770      	bx	lr
 8000276:	0049      	lsls	r1, r1, #1
 8000278:	eb40 0000 	adc.w	r0, r0, r0
 800027c:	3a01      	subs	r2, #1
 800027e:	bf28      	it	cs
 8000280:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000284:	d2ed      	bcs.n	8000262 <__addsf3+0x92>
 8000286:	fab0 fc80 	clz	ip, r0
 800028a:	f1ac 0c08 	sub.w	ip, ip, #8
 800028e:	ebb2 020c 	subs.w	r2, r2, ip
 8000292:	fa00 f00c 	lsl.w	r0, r0, ip
 8000296:	bfaa      	itet	ge
 8000298:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800029c:	4252      	neglt	r2, r2
 800029e:	4318      	orrge	r0, r3
 80002a0:	bfbc      	itt	lt
 80002a2:	40d0      	lsrlt	r0, r2
 80002a4:	4318      	orrlt	r0, r3
 80002a6:	4770      	bx	lr
 80002a8:	f092 0f00 	teq	r2, #0
 80002ac:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80002b0:	bf06      	itte	eq
 80002b2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80002b6:	3201      	addeq	r2, #1
 80002b8:	3b01      	subne	r3, #1
 80002ba:	e7b5      	b.n	8000228 <__addsf3+0x58>
 80002bc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80002c0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80002c4:	bf18      	it	ne
 80002c6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002ca:	d021      	beq.n	8000310 <__addsf3+0x140>
 80002cc:	ea92 0f03 	teq	r2, r3
 80002d0:	d004      	beq.n	80002dc <__addsf3+0x10c>
 80002d2:	f092 0f00 	teq	r2, #0
 80002d6:	bf08      	it	eq
 80002d8:	4608      	moveq	r0, r1
 80002da:	4770      	bx	lr
 80002dc:	ea90 0f01 	teq	r0, r1
 80002e0:	bf1c      	itt	ne
 80002e2:	2000      	movne	r0, #0
 80002e4:	4770      	bxne	lr
 80002e6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80002ea:	d104      	bne.n	80002f6 <__addsf3+0x126>
 80002ec:	0040      	lsls	r0, r0, #1
 80002ee:	bf28      	it	cs
 80002f0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80002f4:	4770      	bx	lr
 80002f6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80002fa:	bf3c      	itt	cc
 80002fc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000300:	4770      	bxcc	lr
 8000302:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000306:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800030a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800030e:	4770      	bx	lr
 8000310:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000314:	bf16      	itet	ne
 8000316:	4608      	movne	r0, r1
 8000318:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800031c:	4601      	movne	r1, r0
 800031e:	0242      	lsls	r2, r0, #9
 8000320:	bf06      	itte	eq
 8000322:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000326:	ea90 0f01 	teqeq	r0, r1
 800032a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800032e:	4770      	bx	lr

08000330 <__aeabi_ui2f>:
 8000330:	f04f 0300 	mov.w	r3, #0
 8000334:	e004      	b.n	8000340 <__aeabi_i2f+0x8>
 8000336:	bf00      	nop

08000338 <__aeabi_i2f>:
 8000338:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800033c:	bf48      	it	mi
 800033e:	4240      	negmi	r0, r0
 8000340:	ea5f 0c00 	movs.w	ip, r0
 8000344:	bf08      	it	eq
 8000346:	4770      	bxeq	lr
 8000348:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 800034c:	4601      	mov	r1, r0
 800034e:	f04f 0000 	mov.w	r0, #0
 8000352:	e01c      	b.n	800038e <__aeabi_l2f+0x2a>

08000354 <__aeabi_ul2f>:
 8000354:	ea50 0201 	orrs.w	r2, r0, r1
 8000358:	bf08      	it	eq
 800035a:	4770      	bxeq	lr
 800035c:	f04f 0300 	mov.w	r3, #0
 8000360:	e00a      	b.n	8000378 <__aeabi_l2f+0x14>
 8000362:	bf00      	nop

08000364 <__aeabi_l2f>:
 8000364:	ea50 0201 	orrs.w	r2, r0, r1
 8000368:	bf08      	it	eq
 800036a:	4770      	bxeq	lr
 800036c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000370:	d502      	bpl.n	8000378 <__aeabi_l2f+0x14>
 8000372:	4240      	negs	r0, r0
 8000374:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000378:	ea5f 0c01 	movs.w	ip, r1
 800037c:	bf02      	ittt	eq
 800037e:	4684      	moveq	ip, r0
 8000380:	4601      	moveq	r1, r0
 8000382:	2000      	moveq	r0, #0
 8000384:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000388:	bf08      	it	eq
 800038a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800038e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000392:	fabc f28c 	clz	r2, ip
 8000396:	3a08      	subs	r2, #8
 8000398:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800039c:	db10      	blt.n	80003c0 <__aeabi_l2f+0x5c>
 800039e:	fa01 fc02 	lsl.w	ip, r1, r2
 80003a2:	4463      	add	r3, ip
 80003a4:	fa00 fc02 	lsl.w	ip, r0, r2
 80003a8:	f1c2 0220 	rsb	r2, r2, #32
 80003ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003b0:	fa20 f202 	lsr.w	r2, r0, r2
 80003b4:	eb43 0002 	adc.w	r0, r3, r2
 80003b8:	bf08      	it	eq
 80003ba:	f020 0001 	biceq.w	r0, r0, #1
 80003be:	4770      	bx	lr
 80003c0:	f102 0220 	add.w	r2, r2, #32
 80003c4:	fa01 fc02 	lsl.w	ip, r1, r2
 80003c8:	f1c2 0220 	rsb	r2, r2, #32
 80003cc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80003d0:	fa21 f202 	lsr.w	r2, r1, r2
 80003d4:	eb43 0002 	adc.w	r0, r3, r2
 80003d8:	bf08      	it	eq
 80003da:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80003de:	4770      	bx	lr

080003e0 <__aeabi_fmul>:
 80003e0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80003e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80003e8:	bf1e      	ittt	ne
 80003ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80003ee:	ea92 0f0c 	teqne	r2, ip
 80003f2:	ea93 0f0c 	teqne	r3, ip
 80003f6:	d06f      	beq.n	80004d8 <__aeabi_fmul+0xf8>
 80003f8:	441a      	add	r2, r3
 80003fa:	ea80 0c01 	eor.w	ip, r0, r1
 80003fe:	0240      	lsls	r0, r0, #9
 8000400:	bf18      	it	ne
 8000402:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000406:	d01e      	beq.n	8000446 <__aeabi_fmul+0x66>
 8000408:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800040c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000410:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000414:	fba0 3101 	umull	r3, r1, r0, r1
 8000418:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800041c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000420:	bf3e      	ittt	cc
 8000422:	0049      	lslcc	r1, r1, #1
 8000424:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000428:	005b      	lslcc	r3, r3, #1
 800042a:	ea40 0001 	orr.w	r0, r0, r1
 800042e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000432:	2afd      	cmp	r2, #253	; 0xfd
 8000434:	d81d      	bhi.n	8000472 <__aeabi_fmul+0x92>
 8000436:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800043a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800043e:	bf08      	it	eq
 8000440:	f020 0001 	biceq.w	r0, r0, #1
 8000444:	4770      	bx	lr
 8000446:	f090 0f00 	teq	r0, #0
 800044a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800044e:	bf08      	it	eq
 8000450:	0249      	lsleq	r1, r1, #9
 8000452:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000456:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800045a:	3a7f      	subs	r2, #127	; 0x7f
 800045c:	bfc2      	ittt	gt
 800045e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000462:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000466:	4770      	bxgt	lr
 8000468:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800046c:	f04f 0300 	mov.w	r3, #0
 8000470:	3a01      	subs	r2, #1
 8000472:	dc5d      	bgt.n	8000530 <__aeabi_fmul+0x150>
 8000474:	f112 0f19 	cmn.w	r2, #25
 8000478:	bfdc      	itt	le
 800047a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800047e:	4770      	bxle	lr
 8000480:	f1c2 0200 	rsb	r2, r2, #0
 8000484:	0041      	lsls	r1, r0, #1
 8000486:	fa21 f102 	lsr.w	r1, r1, r2
 800048a:	f1c2 0220 	rsb	r2, r2, #32
 800048e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000492:	ea5f 0031 	movs.w	r0, r1, rrx
 8000496:	f140 0000 	adc.w	r0, r0, #0
 800049a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800049e:	bf08      	it	eq
 80004a0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004a4:	4770      	bx	lr
 80004a6:	f092 0f00 	teq	r2, #0
 80004aa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80004ae:	bf02      	ittt	eq
 80004b0:	0040      	lsleq	r0, r0, #1
 80004b2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80004b6:	3a01      	subeq	r2, #1
 80004b8:	d0f9      	beq.n	80004ae <__aeabi_fmul+0xce>
 80004ba:	ea40 000c 	orr.w	r0, r0, ip
 80004be:	f093 0f00 	teq	r3, #0
 80004c2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80004c6:	bf02      	ittt	eq
 80004c8:	0049      	lsleq	r1, r1, #1
 80004ca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80004ce:	3b01      	subeq	r3, #1
 80004d0:	d0f9      	beq.n	80004c6 <__aeabi_fmul+0xe6>
 80004d2:	ea41 010c 	orr.w	r1, r1, ip
 80004d6:	e78f      	b.n	80003f8 <__aeabi_fmul+0x18>
 80004d8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80004dc:	ea92 0f0c 	teq	r2, ip
 80004e0:	bf18      	it	ne
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d00a      	beq.n	80004fe <__aeabi_fmul+0x11e>
 80004e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80004ec:	bf18      	it	ne
 80004ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80004f2:	d1d8      	bne.n	80004a6 <__aeabi_fmul+0xc6>
 80004f4:	ea80 0001 	eor.w	r0, r0, r1
 80004f8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004fc:	4770      	bx	lr
 80004fe:	f090 0f00 	teq	r0, #0
 8000502:	bf17      	itett	ne
 8000504:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000508:	4608      	moveq	r0, r1
 800050a:	f091 0f00 	teqne	r1, #0
 800050e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000512:	d014      	beq.n	800053e <__aeabi_fmul+0x15e>
 8000514:	ea92 0f0c 	teq	r2, ip
 8000518:	d101      	bne.n	800051e <__aeabi_fmul+0x13e>
 800051a:	0242      	lsls	r2, r0, #9
 800051c:	d10f      	bne.n	800053e <__aeabi_fmul+0x15e>
 800051e:	ea93 0f0c 	teq	r3, ip
 8000522:	d103      	bne.n	800052c <__aeabi_fmul+0x14c>
 8000524:	024b      	lsls	r3, r1, #9
 8000526:	bf18      	it	ne
 8000528:	4608      	movne	r0, r1
 800052a:	d108      	bne.n	800053e <__aeabi_fmul+0x15e>
 800052c:	ea80 0001 	eor.w	r0, r0, r1
 8000530:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000534:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000538:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800053c:	4770      	bx	lr
 800053e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000542:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000546:	4770      	bx	lr

08000548 <__aeabi_fdiv>:
 8000548:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000550:	bf1e      	ittt	ne
 8000552:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000556:	ea92 0f0c 	teqne	r2, ip
 800055a:	ea93 0f0c 	teqne	r3, ip
 800055e:	d069      	beq.n	8000634 <__aeabi_fdiv+0xec>
 8000560:	eba2 0203 	sub.w	r2, r2, r3
 8000564:	ea80 0c01 	eor.w	ip, r0, r1
 8000568:	0249      	lsls	r1, r1, #9
 800056a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800056e:	d037      	beq.n	80005e0 <__aeabi_fdiv+0x98>
 8000570:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000574:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000578:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 800057c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000580:	428b      	cmp	r3, r1
 8000582:	bf38      	it	cc
 8000584:	005b      	lslcc	r3, r3, #1
 8000586:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800058a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800058e:	428b      	cmp	r3, r1
 8000590:	bf24      	itt	cs
 8000592:	1a5b      	subcs	r3, r3, r1
 8000594:	ea40 000c 	orrcs.w	r0, r0, ip
 8000598:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 800059c:	bf24      	itt	cs
 800059e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80005a2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80005a6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80005aa:	bf24      	itt	cs
 80005ac:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80005b0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80005b4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80005b8:	bf24      	itt	cs
 80005ba:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80005be:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80005c2:	011b      	lsls	r3, r3, #4
 80005c4:	bf18      	it	ne
 80005c6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80005ca:	d1e0      	bne.n	800058e <__aeabi_fdiv+0x46>
 80005cc:	2afd      	cmp	r2, #253	; 0xfd
 80005ce:	f63f af50 	bhi.w	8000472 <__aeabi_fmul+0x92>
 80005d2:	428b      	cmp	r3, r1
 80005d4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80005d8:	bf08      	it	eq
 80005da:	f020 0001 	biceq.w	r0, r0, #1
 80005de:	4770      	bx	lr
 80005e0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80005e4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80005e8:	327f      	adds	r2, #127	; 0x7f
 80005ea:	bfc2      	ittt	gt
 80005ec:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80005f0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005f4:	4770      	bxgt	lr
 80005f6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005fa:	f04f 0300 	mov.w	r3, #0
 80005fe:	3a01      	subs	r2, #1
 8000600:	e737      	b.n	8000472 <__aeabi_fmul+0x92>
 8000602:	f092 0f00 	teq	r2, #0
 8000606:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800060a:	bf02      	ittt	eq
 800060c:	0040      	lsleq	r0, r0, #1
 800060e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000612:	3a01      	subeq	r2, #1
 8000614:	d0f9      	beq.n	800060a <__aeabi_fdiv+0xc2>
 8000616:	ea40 000c 	orr.w	r0, r0, ip
 800061a:	f093 0f00 	teq	r3, #0
 800061e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000622:	bf02      	ittt	eq
 8000624:	0049      	lsleq	r1, r1, #1
 8000626:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800062a:	3b01      	subeq	r3, #1
 800062c:	d0f9      	beq.n	8000622 <__aeabi_fdiv+0xda>
 800062e:	ea41 010c 	orr.w	r1, r1, ip
 8000632:	e795      	b.n	8000560 <__aeabi_fdiv+0x18>
 8000634:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000638:	ea92 0f0c 	teq	r2, ip
 800063c:	d108      	bne.n	8000650 <__aeabi_fdiv+0x108>
 800063e:	0242      	lsls	r2, r0, #9
 8000640:	f47f af7d 	bne.w	800053e <__aeabi_fmul+0x15e>
 8000644:	ea93 0f0c 	teq	r3, ip
 8000648:	f47f af70 	bne.w	800052c <__aeabi_fmul+0x14c>
 800064c:	4608      	mov	r0, r1
 800064e:	e776      	b.n	800053e <__aeabi_fmul+0x15e>
 8000650:	ea93 0f0c 	teq	r3, ip
 8000654:	d104      	bne.n	8000660 <__aeabi_fdiv+0x118>
 8000656:	024b      	lsls	r3, r1, #9
 8000658:	f43f af4c 	beq.w	80004f4 <__aeabi_fmul+0x114>
 800065c:	4608      	mov	r0, r1
 800065e:	e76e      	b.n	800053e <__aeabi_fmul+0x15e>
 8000660:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000664:	bf18      	it	ne
 8000666:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800066a:	d1ca      	bne.n	8000602 <__aeabi_fdiv+0xba>
 800066c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000670:	f47f af5c 	bne.w	800052c <__aeabi_fmul+0x14c>
 8000674:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000678:	f47f af3c 	bne.w	80004f4 <__aeabi_fmul+0x114>
 800067c:	e75f      	b.n	800053e <__aeabi_fmul+0x15e>
 800067e:	bf00      	nop

08000680 <__aeabi_f2uiz>:
 8000680:	0042      	lsls	r2, r0, #1
 8000682:	d20e      	bcs.n	80006a2 <__aeabi_f2uiz+0x22>
 8000684:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000688:	d30b      	bcc.n	80006a2 <__aeabi_f2uiz+0x22>
 800068a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800068e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000692:	d409      	bmi.n	80006a8 <__aeabi_f2uiz+0x28>
 8000694:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000698:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800069c:	fa23 f002 	lsr.w	r0, r3, r2
 80006a0:	4770      	bx	lr
 80006a2:	f04f 0000 	mov.w	r0, #0
 80006a6:	4770      	bx	lr
 80006a8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80006ac:	d101      	bne.n	80006b2 <__aeabi_f2uiz+0x32>
 80006ae:	0242      	lsls	r2, r0, #9
 80006b0:	d102      	bne.n	80006b8 <__aeabi_f2uiz+0x38>
 80006b2:	f04f 30ff 	mov.w	r0, #4294967295
 80006b6:	4770      	bx	lr
 80006b8:	f04f 0000 	mov.w	r0, #0
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop

080006c0 <__aeabi_uldivmod>:
 80006c0:	b953      	cbnz	r3, 80006d8 <__aeabi_uldivmod+0x18>
 80006c2:	b94a      	cbnz	r2, 80006d8 <__aeabi_uldivmod+0x18>
 80006c4:	2900      	cmp	r1, #0
 80006c6:	bf08      	it	eq
 80006c8:	2800      	cmpeq	r0, #0
 80006ca:	bf1c      	itt	ne
 80006cc:	f04f 31ff 	movne.w	r1, #4294967295
 80006d0:	f04f 30ff 	movne.w	r0, #4294967295
 80006d4:	f000 b96e 	b.w	80009b4 <__aeabi_idiv0>
 80006d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80006dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006e0:	f000 f806 	bl	80006f0 <__udivmoddi4>
 80006e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006ec:	b004      	add	sp, #16
 80006ee:	4770      	bx	lr

080006f0 <__udivmoddi4>:
 80006f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006f4:	9e08      	ldr	r6, [sp, #32]
 80006f6:	460d      	mov	r5, r1
 80006f8:	4604      	mov	r4, r0
 80006fa:	468e      	mov	lr, r1
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	f040 8083 	bne.w	8000808 <__udivmoddi4+0x118>
 8000702:	428a      	cmp	r2, r1
 8000704:	4617      	mov	r7, r2
 8000706:	d947      	bls.n	8000798 <__udivmoddi4+0xa8>
 8000708:	fab2 f382 	clz	r3, r2
 800070c:	b14b      	cbz	r3, 8000722 <__udivmoddi4+0x32>
 800070e:	f1c3 0120 	rsb	r1, r3, #32
 8000712:	fa05 fe03 	lsl.w	lr, r5, r3
 8000716:	fa20 f101 	lsr.w	r1, r0, r1
 800071a:	409f      	lsls	r7, r3
 800071c:	ea41 0e0e 	orr.w	lr, r1, lr
 8000720:	409c      	lsls	r4, r3
 8000722:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000726:	fbbe fcf8 	udiv	ip, lr, r8
 800072a:	fa1f f987 	uxth.w	r9, r7
 800072e:	fb08 e21c 	mls	r2, r8, ip, lr
 8000732:	fb0c f009 	mul.w	r0, ip, r9
 8000736:	0c21      	lsrs	r1, r4, #16
 8000738:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 800073c:	4290      	cmp	r0, r2
 800073e:	d90a      	bls.n	8000756 <__udivmoddi4+0x66>
 8000740:	18ba      	adds	r2, r7, r2
 8000742:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000746:	f080 8118 	bcs.w	800097a <__udivmoddi4+0x28a>
 800074a:	4290      	cmp	r0, r2
 800074c:	f240 8115 	bls.w	800097a <__udivmoddi4+0x28a>
 8000750:	f1ac 0c02 	sub.w	ip, ip, #2
 8000754:	443a      	add	r2, r7
 8000756:	1a12      	subs	r2, r2, r0
 8000758:	fbb2 f0f8 	udiv	r0, r2, r8
 800075c:	fb08 2210 	mls	r2, r8, r0, r2
 8000760:	fb00 f109 	mul.w	r1, r0, r9
 8000764:	b2a4      	uxth	r4, r4
 8000766:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800076a:	42a1      	cmp	r1, r4
 800076c:	d909      	bls.n	8000782 <__udivmoddi4+0x92>
 800076e:	193c      	adds	r4, r7, r4
 8000770:	f100 32ff 	add.w	r2, r0, #4294967295
 8000774:	f080 8103 	bcs.w	800097e <__udivmoddi4+0x28e>
 8000778:	42a1      	cmp	r1, r4
 800077a:	f240 8100 	bls.w	800097e <__udivmoddi4+0x28e>
 800077e:	3802      	subs	r0, #2
 8000780:	443c      	add	r4, r7
 8000782:	1a64      	subs	r4, r4, r1
 8000784:	2100      	movs	r1, #0
 8000786:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800078a:	b11e      	cbz	r6, 8000794 <__udivmoddi4+0xa4>
 800078c:	2200      	movs	r2, #0
 800078e:	40dc      	lsrs	r4, r3
 8000790:	e9c6 4200 	strd	r4, r2, [r6]
 8000794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000798:	b902      	cbnz	r2, 800079c <__udivmoddi4+0xac>
 800079a:	deff      	udf	#255	; 0xff
 800079c:	fab2 f382 	clz	r3, r2
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d14f      	bne.n	8000844 <__udivmoddi4+0x154>
 80007a4:	1a8d      	subs	r5, r1, r2
 80007a6:	2101      	movs	r1, #1
 80007a8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80007ac:	fa1f f882 	uxth.w	r8, r2
 80007b0:	fbb5 fcfe 	udiv	ip, r5, lr
 80007b4:	fb0e 551c 	mls	r5, lr, ip, r5
 80007b8:	fb08 f00c 	mul.w	r0, r8, ip
 80007bc:	0c22      	lsrs	r2, r4, #16
 80007be:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 80007c2:	42a8      	cmp	r0, r5
 80007c4:	d907      	bls.n	80007d6 <__udivmoddi4+0xe6>
 80007c6:	197d      	adds	r5, r7, r5
 80007c8:	f10c 32ff 	add.w	r2, ip, #4294967295
 80007cc:	d202      	bcs.n	80007d4 <__udivmoddi4+0xe4>
 80007ce:	42a8      	cmp	r0, r5
 80007d0:	f200 80e9 	bhi.w	80009a6 <__udivmoddi4+0x2b6>
 80007d4:	4694      	mov	ip, r2
 80007d6:	1a2d      	subs	r5, r5, r0
 80007d8:	fbb5 f0fe 	udiv	r0, r5, lr
 80007dc:	fb0e 5510 	mls	r5, lr, r0, r5
 80007e0:	fb08 f800 	mul.w	r8, r8, r0
 80007e4:	b2a4      	uxth	r4, r4
 80007e6:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80007ea:	45a0      	cmp	r8, r4
 80007ec:	d907      	bls.n	80007fe <__udivmoddi4+0x10e>
 80007ee:	193c      	adds	r4, r7, r4
 80007f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80007f4:	d202      	bcs.n	80007fc <__udivmoddi4+0x10c>
 80007f6:	45a0      	cmp	r8, r4
 80007f8:	f200 80d9 	bhi.w	80009ae <__udivmoddi4+0x2be>
 80007fc:	4610      	mov	r0, r2
 80007fe:	eba4 0408 	sub.w	r4, r4, r8
 8000802:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000806:	e7c0      	b.n	800078a <__udivmoddi4+0x9a>
 8000808:	428b      	cmp	r3, r1
 800080a:	d908      	bls.n	800081e <__udivmoddi4+0x12e>
 800080c:	2e00      	cmp	r6, #0
 800080e:	f000 80b1 	beq.w	8000974 <__udivmoddi4+0x284>
 8000812:	2100      	movs	r1, #0
 8000814:	e9c6 0500 	strd	r0, r5, [r6]
 8000818:	4608      	mov	r0, r1
 800081a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800081e:	fab3 f183 	clz	r1, r3
 8000822:	2900      	cmp	r1, #0
 8000824:	d14b      	bne.n	80008be <__udivmoddi4+0x1ce>
 8000826:	42ab      	cmp	r3, r5
 8000828:	d302      	bcc.n	8000830 <__udivmoddi4+0x140>
 800082a:	4282      	cmp	r2, r0
 800082c:	f200 80b9 	bhi.w	80009a2 <__udivmoddi4+0x2b2>
 8000830:	1a84      	subs	r4, r0, r2
 8000832:	eb65 0303 	sbc.w	r3, r5, r3
 8000836:	2001      	movs	r0, #1
 8000838:	469e      	mov	lr, r3
 800083a:	2e00      	cmp	r6, #0
 800083c:	d0aa      	beq.n	8000794 <__udivmoddi4+0xa4>
 800083e:	e9c6 4e00 	strd	r4, lr, [r6]
 8000842:	e7a7      	b.n	8000794 <__udivmoddi4+0xa4>
 8000844:	409f      	lsls	r7, r3
 8000846:	f1c3 0220 	rsb	r2, r3, #32
 800084a:	40d1      	lsrs	r1, r2
 800084c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000850:	fbb1 f0fe 	udiv	r0, r1, lr
 8000854:	fa1f f887 	uxth.w	r8, r7
 8000858:	fb0e 1110 	mls	r1, lr, r0, r1
 800085c:	fa24 f202 	lsr.w	r2, r4, r2
 8000860:	409d      	lsls	r5, r3
 8000862:	fb00 fc08 	mul.w	ip, r0, r8
 8000866:	432a      	orrs	r2, r5
 8000868:	0c15      	lsrs	r5, r2, #16
 800086a:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 800086e:	45ac      	cmp	ip, r5
 8000870:	fa04 f403 	lsl.w	r4, r4, r3
 8000874:	d909      	bls.n	800088a <__udivmoddi4+0x19a>
 8000876:	197d      	adds	r5, r7, r5
 8000878:	f100 31ff 	add.w	r1, r0, #4294967295
 800087c:	f080 808f 	bcs.w	800099e <__udivmoddi4+0x2ae>
 8000880:	45ac      	cmp	ip, r5
 8000882:	f240 808c 	bls.w	800099e <__udivmoddi4+0x2ae>
 8000886:	3802      	subs	r0, #2
 8000888:	443d      	add	r5, r7
 800088a:	eba5 050c 	sub.w	r5, r5, ip
 800088e:	fbb5 f1fe 	udiv	r1, r5, lr
 8000892:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000896:	fb01 f908 	mul.w	r9, r1, r8
 800089a:	b295      	uxth	r5, r2
 800089c:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80008a0:	45a9      	cmp	r9, r5
 80008a2:	d907      	bls.n	80008b4 <__udivmoddi4+0x1c4>
 80008a4:	197d      	adds	r5, r7, r5
 80008a6:	f101 32ff 	add.w	r2, r1, #4294967295
 80008aa:	d274      	bcs.n	8000996 <__udivmoddi4+0x2a6>
 80008ac:	45a9      	cmp	r9, r5
 80008ae:	d972      	bls.n	8000996 <__udivmoddi4+0x2a6>
 80008b0:	3902      	subs	r1, #2
 80008b2:	443d      	add	r5, r7
 80008b4:	eba5 0509 	sub.w	r5, r5, r9
 80008b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80008bc:	e778      	b.n	80007b0 <__udivmoddi4+0xc0>
 80008be:	f1c1 0720 	rsb	r7, r1, #32
 80008c2:	408b      	lsls	r3, r1
 80008c4:	fa22 fc07 	lsr.w	ip, r2, r7
 80008c8:	ea4c 0c03 	orr.w	ip, ip, r3
 80008cc:	fa25 f407 	lsr.w	r4, r5, r7
 80008d0:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80008d4:	fbb4 f9fe 	udiv	r9, r4, lr
 80008d8:	fa1f f88c 	uxth.w	r8, ip
 80008dc:	fb0e 4419 	mls	r4, lr, r9, r4
 80008e0:	fa20 f307 	lsr.w	r3, r0, r7
 80008e4:	fb09 fa08 	mul.w	sl, r9, r8
 80008e8:	408d      	lsls	r5, r1
 80008ea:	431d      	orrs	r5, r3
 80008ec:	0c2b      	lsrs	r3, r5, #16
 80008ee:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80008f2:	45a2      	cmp	sl, r4
 80008f4:	fa02 f201 	lsl.w	r2, r2, r1
 80008f8:	fa00 f301 	lsl.w	r3, r0, r1
 80008fc:	d909      	bls.n	8000912 <__udivmoddi4+0x222>
 80008fe:	eb1c 0404 	adds.w	r4, ip, r4
 8000902:	f109 30ff 	add.w	r0, r9, #4294967295
 8000906:	d248      	bcs.n	800099a <__udivmoddi4+0x2aa>
 8000908:	45a2      	cmp	sl, r4
 800090a:	d946      	bls.n	800099a <__udivmoddi4+0x2aa>
 800090c:	f1a9 0902 	sub.w	r9, r9, #2
 8000910:	4464      	add	r4, ip
 8000912:	eba4 040a 	sub.w	r4, r4, sl
 8000916:	fbb4 f0fe 	udiv	r0, r4, lr
 800091a:	fb0e 4410 	mls	r4, lr, r0, r4
 800091e:	fb00 fa08 	mul.w	sl, r0, r8
 8000922:	b2ad      	uxth	r5, r5
 8000924:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000928:	45a2      	cmp	sl, r4
 800092a:	d908      	bls.n	800093e <__udivmoddi4+0x24e>
 800092c:	eb1c 0404 	adds.w	r4, ip, r4
 8000930:	f100 35ff 	add.w	r5, r0, #4294967295
 8000934:	d22d      	bcs.n	8000992 <__udivmoddi4+0x2a2>
 8000936:	45a2      	cmp	sl, r4
 8000938:	d92b      	bls.n	8000992 <__udivmoddi4+0x2a2>
 800093a:	3802      	subs	r0, #2
 800093c:	4464      	add	r4, ip
 800093e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000942:	fba0 8902 	umull	r8, r9, r0, r2
 8000946:	eba4 040a 	sub.w	r4, r4, sl
 800094a:	454c      	cmp	r4, r9
 800094c:	46c6      	mov	lr, r8
 800094e:	464d      	mov	r5, r9
 8000950:	d319      	bcc.n	8000986 <__udivmoddi4+0x296>
 8000952:	d016      	beq.n	8000982 <__udivmoddi4+0x292>
 8000954:	b15e      	cbz	r6, 800096e <__udivmoddi4+0x27e>
 8000956:	ebb3 020e 	subs.w	r2, r3, lr
 800095a:	eb64 0405 	sbc.w	r4, r4, r5
 800095e:	fa04 f707 	lsl.w	r7, r4, r7
 8000962:	fa22 f301 	lsr.w	r3, r2, r1
 8000966:	431f      	orrs	r7, r3
 8000968:	40cc      	lsrs	r4, r1
 800096a:	e9c6 7400 	strd	r7, r4, [r6]
 800096e:	2100      	movs	r1, #0
 8000970:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000974:	4631      	mov	r1, r6
 8000976:	4630      	mov	r0, r6
 8000978:	e70c      	b.n	8000794 <__udivmoddi4+0xa4>
 800097a:	468c      	mov	ip, r1
 800097c:	e6eb      	b.n	8000756 <__udivmoddi4+0x66>
 800097e:	4610      	mov	r0, r2
 8000980:	e6ff      	b.n	8000782 <__udivmoddi4+0x92>
 8000982:	4543      	cmp	r3, r8
 8000984:	d2e6      	bcs.n	8000954 <__udivmoddi4+0x264>
 8000986:	ebb8 0e02 	subs.w	lr, r8, r2
 800098a:	eb69 050c 	sbc.w	r5, r9, ip
 800098e:	3801      	subs	r0, #1
 8000990:	e7e0      	b.n	8000954 <__udivmoddi4+0x264>
 8000992:	4628      	mov	r0, r5
 8000994:	e7d3      	b.n	800093e <__udivmoddi4+0x24e>
 8000996:	4611      	mov	r1, r2
 8000998:	e78c      	b.n	80008b4 <__udivmoddi4+0x1c4>
 800099a:	4681      	mov	r9, r0
 800099c:	e7b9      	b.n	8000912 <__udivmoddi4+0x222>
 800099e:	4608      	mov	r0, r1
 80009a0:	e773      	b.n	800088a <__udivmoddi4+0x19a>
 80009a2:	4608      	mov	r0, r1
 80009a4:	e749      	b.n	800083a <__udivmoddi4+0x14a>
 80009a6:	f1ac 0c02 	sub.w	ip, ip, #2
 80009aa:	443d      	add	r5, r7
 80009ac:	e713      	b.n	80007d6 <__udivmoddi4+0xe6>
 80009ae:	3802      	subs	r0, #2
 80009b0:	443c      	add	r4, r7
 80009b2:	e724      	b.n	80007fe <__udivmoddi4+0x10e>

080009b4 <__aeabi_idiv0>:
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80009bc:	4b17      	ldr	r3, [pc, #92]	; (8000a1c <MX_CAN1_Init+0x64>)
 80009be:	4a18      	ldr	r2, [pc, #96]	; (8000a20 <MX_CAN1_Init+0x68>)
 80009c0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 10;
 80009c2:	4b16      	ldr	r3, [pc, #88]	; (8000a1c <MX_CAN1_Init+0x64>)
 80009c4:	220a      	movs	r2, #10
 80009c6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80009c8:	4b14      	ldr	r3, [pc, #80]	; (8000a1c <MX_CAN1_Init+0x64>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80009ce:	4b13      	ldr	r3, [pc, #76]	; (8000a1c <MX_CAN1_Init+0x64>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 80009d4:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <MX_CAN1_Init+0x64>)
 80009d6:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 80009da:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80009dc:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <MX_CAN1_Init+0x64>)
 80009de:	2200      	movs	r2, #0
 80009e0:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80009e2:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <MX_CAN1_Init+0x64>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80009e8:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <MX_CAN1_Init+0x64>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80009ee:	4b0b      	ldr	r3, [pc, #44]	; (8000a1c <MX_CAN1_Init+0x64>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80009f4:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <MX_CAN1_Init+0x64>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80009fa:	4b08      	ldr	r3, [pc, #32]	; (8000a1c <MX_CAN1_Init+0x64>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000a00:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <MX_CAN1_Init+0x64>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000a06:	4805      	ldr	r0, [pc, #20]	; (8000a1c <MX_CAN1_Init+0x64>)
 8000a08:	f000 fc6e 	bl	80012e8 <HAL_CAN_Init>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8000a12:	f000 fafb 	bl	800100c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	20000050 	.word	0x20000050
 8000a20:	40006400 	.word	0x40006400

08000a24 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08a      	sub	sp, #40	; 0x28
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2c:	f107 0314 	add.w	r3, r7, #20
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
 8000a36:	609a      	str	r2, [r3, #8]
 8000a38:	60da      	str	r2, [r3, #12]
 8000a3a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a1d      	ldr	r2, [pc, #116]	; (8000ab8 <HAL_CAN_MspInit+0x94>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d133      	bne.n	8000aae <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	613b      	str	r3, [r7, #16]
 8000a4a:	4b1c      	ldr	r3, [pc, #112]	; (8000abc <HAL_CAN_MspInit+0x98>)
 8000a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4e:	4a1b      	ldr	r2, [pc, #108]	; (8000abc <HAL_CAN_MspInit+0x98>)
 8000a50:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a54:	6413      	str	r3, [r2, #64]	; 0x40
 8000a56:	4b19      	ldr	r3, [pc, #100]	; (8000abc <HAL_CAN_MspInit+0x98>)
 8000a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a5e:	613b      	str	r3, [r7, #16]
 8000a60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	60fb      	str	r3, [r7, #12]
 8000a66:	4b15      	ldr	r3, [pc, #84]	; (8000abc <HAL_CAN_MspInit+0x98>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	4a14      	ldr	r2, [pc, #80]	; (8000abc <HAL_CAN_MspInit+0x98>)
 8000a6c:	f043 0308 	orr.w	r3, r3, #8
 8000a70:	6313      	str	r3, [r2, #48]	; 0x30
 8000a72:	4b12      	ldr	r3, [pc, #72]	; (8000abc <HAL_CAN_MspInit+0x98>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	f003 0308 	and.w	r3, r3, #8
 8000a7a:	60fb      	str	r3, [r7, #12]
 8000a7c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a7e:	2303      	movs	r3, #3
 8000a80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a82:	2302      	movs	r3, #2
 8000a84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a8a:	2303      	movs	r3, #3
 8000a8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000a8e:	2309      	movs	r3, #9
 8000a90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a92:	f107 0314 	add.w	r3, r7, #20
 8000a96:	4619      	mov	r1, r3
 8000a98:	4809      	ldr	r0, [pc, #36]	; (8000ac0 <HAL_CAN_MspInit+0x9c>)
 8000a9a:	f001 fb87 	bl	80021ac <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	2014      	movs	r0, #20
 8000aa4:	f001 fb4b 	bl	800213e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000aa8:	2014      	movs	r0, #20
 8000aaa:	f001 fb64 	bl	8002176 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000aae:	bf00      	nop
 8000ab0:	3728      	adds	r7, #40	; 0x28
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40006400 	.word	0x40006400
 8000abc:	40023800 	.word	0x40023800
 8000ac0:	40020c00 	.word	0x40020c00

08000ac4 <CAN_Start>:
  }
}

/* USER CODE BEGIN 1 */
void CAN_Start(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
	if(HAL_OK != HAL_CAN_Start(&hcan1))
 8000ac8:	4804      	ldr	r0, [pc, #16]	; (8000adc <CAN_Start+0x18>)
 8000aca:	f000 fde9 	bl	80016a0 <HAL_CAN_Start>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <CAN_Start+0x14>
	{
		Error_Handler();
 8000ad4:	f000 fa9a 	bl	800100c <Error_Handler>
	}
}
 8000ad8:	bf00      	nop
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	20000050 	.word	0x20000050

08000ae0 <CAN_ActivateNotification>:
void CAN_ActivateNotification(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
	if(HAL_OK != HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING))
 8000ae4:	2102      	movs	r1, #2
 8000ae6:	4805      	ldr	r0, [pc, #20]	; (8000afc <CAN_ActivateNotification+0x1c>)
 8000ae8:	f001 f809 	bl	8001afe <HAL_CAN_ActivateNotification>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <CAN_ActivateNotification+0x16>
	{
		Error_Handler();
 8000af2:	f000 fa8b 	bl	800100c <Error_Handler>
	}
}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	20000050 	.word	0x20000050

08000b00 <CAN_Filter_Config>:
void CAN_Filter_Config(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0



	CAN_Filter_Cfg.FilterActivation = CAN_FILTER_ENABLE;
 8000b04:	4b16      	ldr	r3, [pc, #88]	; (8000b60 <CAN_Filter_Config+0x60>)
 8000b06:	2201      	movs	r2, #1
 8000b08:	621a      	str	r2, [r3, #32]
	CAN_Filter_Cfg.FilterIdHigh = (BLDC_CONTROLLER_ID >> 13) & 0xFFFF;
 8000b0a:	4b15      	ldr	r3, [pc, #84]	; (8000b60 <CAN_Filter_Config+0x60>)
 8000b0c:	f246 7288 	movw	r2, #26504	; 0x6788
 8000b10:	601a      	str	r2, [r3, #0]
	CAN_Filter_Cfg.FilterIdLow = (BLDC_CONTROLLER_ID << 3) & 0xFFF8;
 8000b12:	4b13      	ldr	r3, [pc, #76]	; (8000b60 <CAN_Filter_Config+0x60>)
 8000b14:	f24f 0228 	movw	r2, #61480	; 0xf028
 8000b18:	605a      	str	r2, [r3, #4]
	CAN_Filter_Cfg.FilterMaskIdHigh = (BLDC_CONTROLLER_ID >> 13) & 0xFFFF;
 8000b1a:	4b11      	ldr	r3, [pc, #68]	; (8000b60 <CAN_Filter_Config+0x60>)
 8000b1c:	f246 7288 	movw	r2, #26504	; 0x6788
 8000b20:	609a      	str	r2, [r3, #8]
	CAN_Filter_Cfg.FilterMaskIdLow = (BLDC_CONTROLLER_ID << 3) & 0xFFF8;
 8000b22:	4b0f      	ldr	r3, [pc, #60]	; (8000b60 <CAN_Filter_Config+0x60>)
 8000b24:	f24f 0228 	movw	r2, #61480	; 0xf028
 8000b28:	60da      	str	r2, [r3, #12]
	/*CAN_Filter_Cfg.FilterIdHigh = (BLDC_CONTROLLER_ID & 0xFF00) >> 16;
	CAN_Filter_Cfg.FilterIdLow = (BLDC_CONTROLLER_ID & 0x00FF) << 3;
	CAN_Filter_Cfg.FilterMaskIdHigh = (BLDC_CONTROLLER_ID & 0xFF00) >> 16;
	CAN_Filter_Cfg.FilterMaskIdLow = (BLDC_CONTROLLER_ID & 0x00FF) << 3;*/
	CAN_Filter_Cfg.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000b2a:	4b0d      	ldr	r3, [pc, #52]	; (8000b60 <CAN_Filter_Config+0x60>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	611a      	str	r2, [r3, #16]
	CAN_Filter_Cfg.FilterBank = 8;
 8000b30:	4b0b      	ldr	r3, [pc, #44]	; (8000b60 <CAN_Filter_Config+0x60>)
 8000b32:	2208      	movs	r2, #8
 8000b34:	615a      	str	r2, [r3, #20]
	CAN_Filter_Cfg.FilterMode = CAN_FILTERMODE_IDMASK;
 8000b36:	4b0a      	ldr	r3, [pc, #40]	; (8000b60 <CAN_Filter_Config+0x60>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	619a      	str	r2, [r3, #24]
	CAN_Filter_Cfg.FilterScale = CAN_FILTERSCALE_32BIT;
 8000b3c:	4b08      	ldr	r3, [pc, #32]	; (8000b60 <CAN_Filter_Config+0x60>)
 8000b3e:	2201      	movs	r2, #1
 8000b40:	61da      	str	r2, [r3, #28]
	CAN_Filter_Cfg.SlaveStartFilterBank = 0;
 8000b42:	4b07      	ldr	r3, [pc, #28]	; (8000b60 <CAN_Filter_Config+0x60>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	625a      	str	r2, [r3, #36]	; 0x24

	if(HAL_OK != HAL_CAN_ConfigFilter(&hcan1, &CAN_Filter_Cfg))
 8000b48:	4905      	ldr	r1, [pc, #20]	; (8000b60 <CAN_Filter_Config+0x60>)
 8000b4a:	4806      	ldr	r0, [pc, #24]	; (8000b64 <CAN_Filter_Config+0x64>)
 8000b4c:	f000 fcc8 	bl	80014e0 <HAL_CAN_ConfigFilter>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <CAN_Filter_Config+0x5a>
	{
		Error_Handler();
 8000b56:	f000 fa59 	bl	800100c <Error_Handler>
	}
}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	20000028 	.word	0x20000028
 8000b64:	20000050 	.word	0x20000050

08000b68 <CAN_NMEA2000_Tx_Header_Config>:
void CAN_NMEA2000_Tx_Header_Config(uint32_t NMEA2000_Msg_Id)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b085      	sub	sp, #20
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
	CAN_NMEA2000_Header_ID_t CAN_Tx_Header_ExtId = {
 8000b70:	2300      	movs	r3, #0
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	2317      	movs	r3, #23
 8000b76:	733b      	strb	r3, [r7, #12]
 8000b78:	7bfb      	ldrb	r3, [r7, #15]
 8000b7a:	2206      	movs	r2, #6
 8000b7c:	f362 0384 	bfi	r3, r2, #2, #3
 8000b80:	73fb      	strb	r3, [r7, #15]
			.Priority = 6,
			/*.Reserved = 0,*/
			.MsgId = 0,
			.MyId = MY_EXT_ID
	};
	CAN_Tx_Header_ExtId.MsgId = NMEA2000_Msg_Id;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	f3c3 0210 	ubfx	r2, r3, #0, #17
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	f362 2318 	bfi	r3, r2, #8, #17
 8000b8e:	60fb      	str	r3, [r7, #12]

	TxHeader.DLC = 8;
 8000b90:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <CAN_NMEA2000_Tx_Header_Config+0x5c>)
 8000b92:	2208      	movs	r2, #8
 8000b94:	611a      	str	r2, [r3, #16]
	TxHeader.ExtId = *(uint32_t*)&CAN_Tx_Header_ExtId;//MY_EXT_ID;
 8000b96:	f107 030c 	add.w	r3, r7, #12
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a09      	ldr	r2, [pc, #36]	; (8000bc4 <CAN_NMEA2000_Tx_Header_Config+0x5c>)
 8000b9e:	6053      	str	r3, [r2, #4]
	TxHeader.IDE = CAN_ID_EXT;
 8000ba0:	4b08      	ldr	r3, [pc, #32]	; (8000bc4 <CAN_NMEA2000_Tx_Header_Config+0x5c>)
 8000ba2:	2204      	movs	r2, #4
 8000ba4:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 8000ba6:	4b07      	ldr	r3, [pc, #28]	; (8000bc4 <CAN_NMEA2000_Tx_Header_Config+0x5c>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	60da      	str	r2, [r3, #12]
	TxHeader.StdId = 0;
 8000bac:	4b05      	ldr	r3, [pc, #20]	; (8000bc4 <CAN_NMEA2000_Tx_Header_Config+0x5c>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
	TxHeader.TransmitGlobalTime = DISABLE;
 8000bb2:	4b04      	ldr	r3, [pc, #16]	; (8000bc4 <CAN_NMEA2000_Tx_Header_Config+0x5c>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	751a      	strb	r2, [r3, #20]
}
 8000bb8:	bf00      	nop
 8000bba:	3714      	adds	r7, #20
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bc80      	pop	{r7}
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	20000078 	.word	0x20000078

08000bc8 <CAN_Transmit_Msg>:
status_t CAN_Transmit_Msg(uint8_t* TxData)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b084      	sub	sp, #16
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
	status_t status = OK;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	73fb      	strb	r3, [r7, #15]
	uint32_t TxMailbox;
	if(HAL_OK != HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox))
 8000bd4:	f107 0308 	add.w	r3, r7, #8
 8000bd8:	687a      	ldr	r2, [r7, #4]
 8000bda:	4907      	ldr	r1, [pc, #28]	; (8000bf8 <CAN_Transmit_Msg+0x30>)
 8000bdc:	4807      	ldr	r0, [pc, #28]	; (8000bfc <CAN_Transmit_Msg+0x34>)
 8000bde:	f000 fda3 	bl	8001728 <HAL_CAN_AddTxMessage>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <CAN_Transmit_Msg+0x24>
	{
		status = Error;
 8000be8:	2301      	movs	r3, #1
 8000bea:	73fb      	strb	r3, [r7, #15]
	}
	return status;
 8000bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3710      	adds	r7, #16
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	20000078 	.word	0x20000078
 8000bfc:	20000050 	.word	0x20000050

08000c00 <CAN_Receive_Msg>:
status_t CAN_Receive_Msg(uint8_t* RxData)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
	status_t status = OK;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	73fb      	strb	r3, [r7, #15]
	if(HAL_OK != HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData))
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	4a07      	ldr	r2, [pc, #28]	; (8000c2c <CAN_Receive_Msg+0x2c>)
 8000c10:	2100      	movs	r1, #0
 8000c12:	4807      	ldr	r0, [pc, #28]	; (8000c30 <CAN_Receive_Msg+0x30>)
 8000c14:	f000 fe62 	bl	80018dc <HAL_CAN_GetRxMessage>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <CAN_Receive_Msg+0x22>
	{
		status = Error;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	73fb      	strb	r3, [r7, #15]
	}
	return status;
 8000c22:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	3710      	adds	r7, #16
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	20000090 	.word	0x20000090
 8000c30:	20000050 	.word	0x20000050

08000c34 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b08c      	sub	sp, #48	; 0x30
 8000c38:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3a:	f107 031c 	add.w	r3, r7, #28
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	605a      	str	r2, [r3, #4]
 8000c44:	609a      	str	r2, [r3, #8]
 8000c46:	60da      	str	r2, [r3, #12]
 8000c48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61bb      	str	r3, [r7, #24]
 8000c4e:	4b7c      	ldr	r3, [pc, #496]	; (8000e40 <MX_GPIO_Init+0x20c>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	4a7b      	ldr	r2, [pc, #492]	; (8000e40 <MX_GPIO_Init+0x20c>)
 8000c54:	f043 0304 	orr.w	r3, r3, #4
 8000c58:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5a:	4b79      	ldr	r3, [pc, #484]	; (8000e40 <MX_GPIO_Init+0x20c>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	f003 0304 	and.w	r3, r3, #4
 8000c62:	61bb      	str	r3, [r7, #24]
 8000c64:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	617b      	str	r3, [r7, #20]
 8000c6a:	4b75      	ldr	r3, [pc, #468]	; (8000e40 <MX_GPIO_Init+0x20c>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	4a74      	ldr	r2, [pc, #464]	; (8000e40 <MX_GPIO_Init+0x20c>)
 8000c70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c74:	6313      	str	r3, [r2, #48]	; 0x30
 8000c76:	4b72      	ldr	r3, [pc, #456]	; (8000e40 <MX_GPIO_Init+0x20c>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c7e:	617b      	str	r3, [r7, #20]
 8000c80:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	613b      	str	r3, [r7, #16]
 8000c86:	4b6e      	ldr	r3, [pc, #440]	; (8000e40 <MX_GPIO_Init+0x20c>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	4a6d      	ldr	r2, [pc, #436]	; (8000e40 <MX_GPIO_Init+0x20c>)
 8000c8c:	f043 0301 	orr.w	r3, r3, #1
 8000c90:	6313      	str	r3, [r2, #48]	; 0x30
 8000c92:	4b6b      	ldr	r3, [pc, #428]	; (8000e40 <MX_GPIO_Init+0x20c>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	f003 0301 	and.w	r3, r3, #1
 8000c9a:	613b      	str	r3, [r7, #16]
 8000c9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60fb      	str	r3, [r7, #12]
 8000ca2:	4b67      	ldr	r3, [pc, #412]	; (8000e40 <MX_GPIO_Init+0x20c>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	4a66      	ldr	r2, [pc, #408]	; (8000e40 <MX_GPIO_Init+0x20c>)
 8000ca8:	f043 0302 	orr.w	r3, r3, #2
 8000cac:	6313      	str	r3, [r2, #48]	; 0x30
 8000cae:	4b64      	ldr	r3, [pc, #400]	; (8000e40 <MX_GPIO_Init+0x20c>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	f003 0302 	and.w	r3, r3, #2
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60bb      	str	r3, [r7, #8]
 8000cbe:	4b60      	ldr	r3, [pc, #384]	; (8000e40 <MX_GPIO_Init+0x20c>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	4a5f      	ldr	r2, [pc, #380]	; (8000e40 <MX_GPIO_Init+0x20c>)
 8000cc4:	f043 0308 	orr.w	r3, r3, #8
 8000cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cca:	4b5d      	ldr	r3, [pc, #372]	; (8000e40 <MX_GPIO_Init+0x20c>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	f003 0308 	and.w	r3, r3, #8
 8000cd2:	60bb      	str	r3, [r7, #8]
 8000cd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	607b      	str	r3, [r7, #4]
 8000cda:	4b59      	ldr	r3, [pc, #356]	; (8000e40 <MX_GPIO_Init+0x20c>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	4a58      	ldr	r2, [pc, #352]	; (8000e40 <MX_GPIO_Init+0x20c>)
 8000ce0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce6:	4b56      	ldr	r3, [pc, #344]	; (8000e40 <MX_GPIO_Init+0x20c>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cee:	607b      	str	r3, [r7, #4]
 8000cf0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f244 0181 	movw	r1, #16513	; 0x4081
 8000cf8:	4852      	ldr	r0, [pc, #328]	; (8000e44 <MX_GPIO_Init+0x210>)
 8000cfa:	f001 fbf5 	bl	80024e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2140      	movs	r1, #64	; 0x40
 8000d02:	4851      	ldr	r0, [pc, #324]	; (8000e48 <MX_GPIO_Init+0x214>)
 8000d04:	f001 fbf0 	bl	80024e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000d08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d0e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000d18:	f107 031c 	add.w	r3, r7, #28
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	484b      	ldr	r0, [pc, #300]	; (8000e4c <MX_GPIO_Init+0x218>)
 8000d20:	f001 fa44 	bl	80021ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000d24:	2332      	movs	r3, #50	; 0x32
 8000d26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d30:	2303      	movs	r3, #3
 8000d32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d34:	230b      	movs	r3, #11
 8000d36:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d38:	f107 031c 	add.w	r3, r7, #28
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4843      	ldr	r0, [pc, #268]	; (8000e4c <MX_GPIO_Init+0x218>)
 8000d40:	f001 fa34 	bl	80021ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000d44:	2386      	movs	r3, #134	; 0x86
 8000d46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d50:	2303      	movs	r3, #3
 8000d52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d54:	230b      	movs	r3, #11
 8000d56:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d58:	f107 031c 	add.w	r3, r7, #28
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	483c      	ldr	r0, [pc, #240]	; (8000e50 <MX_GPIO_Init+0x21c>)
 8000d60:	f001 fa24 	bl	80021ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000d64:	f244 0381 	movw	r3, #16513	; 0x4081
 8000d68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d72:	2300      	movs	r3, #0
 8000d74:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d76:	f107 031c 	add.w	r3, r7, #28
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4831      	ldr	r0, [pc, #196]	; (8000e44 <MX_GPIO_Init+0x210>)
 8000d7e:	f001 fa15 	bl	80021ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000d82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d90:	2303      	movs	r3, #3
 8000d92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d94:	230b      	movs	r3, #11
 8000d96:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000d98:	f107 031c 	add.w	r3, r7, #28
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4829      	ldr	r0, [pc, #164]	; (8000e44 <MX_GPIO_Init+0x210>)
 8000da0:	f001 fa04 	bl	80021ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000da4:	2340      	movs	r3, #64	; 0x40
 8000da6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da8:	2301      	movs	r3, #1
 8000daa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db0:	2300      	movs	r3, #0
 8000db2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000db4:	f107 031c 	add.w	r3, r7, #28
 8000db8:	4619      	mov	r1, r3
 8000dba:	4823      	ldr	r0, [pc, #140]	; (8000e48 <MX_GPIO_Init+0x214>)
 8000dbc:	f001 f9f6 	bl	80021ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000dc0:	2380      	movs	r3, #128	; 0x80
 8000dc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000dcc:	f107 031c 	add.w	r3, r7, #28
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	481d      	ldr	r0, [pc, #116]	; (8000e48 <MX_GPIO_Init+0x214>)
 8000dd4:	f001 f9ea 	bl	80021ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000dd8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000ddc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dde:	2302      	movs	r3, #2
 8000de0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de2:	2300      	movs	r3, #0
 8000de4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de6:	2303      	movs	r3, #3
 8000de8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000dea:	230a      	movs	r3, #10
 8000dec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dee:	f107 031c 	add.w	r3, r7, #28
 8000df2:	4619      	mov	r1, r3
 8000df4:	4816      	ldr	r0, [pc, #88]	; (8000e50 <MX_GPIO_Init+0x21c>)
 8000df6:	f001 f9d9 	bl	80021ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000dfa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e00:	2300      	movs	r3, #0
 8000e02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e04:	2300      	movs	r3, #0
 8000e06:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e08:	f107 031c 	add.w	r3, r7, #28
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4810      	ldr	r0, [pc, #64]	; (8000e50 <MX_GPIO_Init+0x21c>)
 8000e10:	f001 f9cc 	bl	80021ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000e14:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000e18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e22:	2303      	movs	r3, #3
 8000e24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e26:	230b      	movs	r3, #11
 8000e28:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e2a:	f107 031c 	add.w	r3, r7, #28
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4805      	ldr	r0, [pc, #20]	; (8000e48 <MX_GPIO_Init+0x214>)
 8000e32:	f001 f9bb 	bl	80021ac <HAL_GPIO_Init>

}
 8000e36:	bf00      	nop
 8000e38:	3730      	adds	r7, #48	; 0x30
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40023800 	.word	0x40023800
 8000e44:	40020400 	.word	0x40020400
 8000e48:	40021800 	.word	0x40021800
 8000e4c:	40020800 	.word	0x40020800
 8000e50:	40020000 	.word	0x40020000

08000e54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e58:	f000 f9d8 	bl	800120c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e5c:	f000 f811 	bl	8000e82 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e60:	f7ff fee8 	bl	8000c34 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000e64:	f000 f936 	bl	80010d4 <MX_USART3_UART_Init>
  MX_CAN1_Init();
 8000e68:	f7ff fda6 	bl	80009b8 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  CAN_Start();
 8000e6c:	f7ff fe2a 	bl	8000ac4 <CAN_Start>
  CAN_ActivateNotification();
 8000e70:	f7ff fe36 	bl	8000ae0 <CAN_ActivateNotification>
  CAN_Filter_Config();
 8000e74:	f7ff fe44 	bl	8000b00 <CAN_Filter_Config>
  //CAN_Tx_Header_Config();
  CAN_NMEA2000_Tx_Header_Config(127488);
 8000e78:	f44f 30f9 	mov.w	r0, #127488	; 0x1f200
 8000e7c:	f7ff fe74 	bl	8000b68 <CAN_NMEA2000_Tx_Header_Config>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e80:	e7fe      	b.n	8000e80 <main+0x2c>

08000e82 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	b092      	sub	sp, #72	; 0x48
 8000e86:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e88:	f107 0318 	add.w	r3, r7, #24
 8000e8c:	2230      	movs	r2, #48	; 0x30
 8000e8e:	2100      	movs	r1, #0
 8000e90:	4618      	mov	r0, r3
 8000e92:	f002 f923 	bl	80030dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e96:	1d3b      	adds	r3, r7, #4
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	605a      	str	r2, [r3, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
 8000ea0:	60da      	str	r2, [r3, #12]
 8000ea2:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000eac:	2310      	movs	r3, #16
 8000eae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 13;
 8000eb8:	230d      	movs	r3, #13
 8000eba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 195;
 8000ebc:	23c3      	movs	r3, #195	; 0xc3
 8000ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000ec4:	2305      	movs	r3, #5
 8000ec6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ec8:	f107 0318 	add.w	r3, r7, #24
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f001 fb3d 	bl	800254c <HAL_RCC_OscConfig>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8000ed8:	f000 f898 	bl	800100c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000edc:	230f      	movs	r3, #15
 8000ede:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ee8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000eec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000eee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ef2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000ef4:	1d3b      	adds	r3, r7, #4
 8000ef6:	2103      	movs	r1, #3
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f001 fd77 	bl	80029ec <HAL_RCC_ClockConfig>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000f04:	f000 f882 	bl	800100c <Error_Handler>
  }
}
 8000f08:	bf00      	nop
 8000f0a:	3748      	adds	r7, #72	; 0x48
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
/**/void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
	CAN_Receive_Msg(RxData);
 8000f18:	4831      	ldr	r0, [pc, #196]	; (8000fe0 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 8000f1a:	f7ff fe71 	bl	8000c00 <CAN_Receive_Msg>
	if(RxHeader.ExtId == 0xCF11E05)
 8000f1e:	4b31      	ldr	r3, [pc, #196]	; (8000fe4 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	4a31      	ldr	r2, [pc, #196]	; (8000fe8 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d151      	bne.n	8000fcc <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>
	{
		rpm = 256 * RxData[1] + RxData[0];
 8000f28:	4b2d      	ldr	r3, [pc, #180]	; (8000fe0 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 8000f2a:	785b      	ldrb	r3, [r3, #1]
 8000f2c:	021b      	lsls	r3, r3, #8
 8000f2e:	4a2c      	ldr	r2, [pc, #176]	; (8000fe0 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 8000f30:	7812      	ldrb	r2, [r2, #0]
 8000f32:	4413      	add	r3, r2
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff f9ff 	bl	8000338 <__aeabi_i2f>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	4a2b      	ldr	r2, [pc, #172]	; (8000fec <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 8000f3e:	6013      	str	r3, [r2, #0]
		current = (256 * RxData[3] + RxData[2])/10;
 8000f40:	4b27      	ldr	r3, [pc, #156]	; (8000fe0 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 8000f42:	78db      	ldrb	r3, [r3, #3]
 8000f44:	021b      	lsls	r3, r3, #8
 8000f46:	4a26      	ldr	r2, [pc, #152]	; (8000fe0 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 8000f48:	7892      	ldrb	r2, [r2, #2]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	4a28      	ldr	r2, [pc, #160]	; (8000ff0 <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 8000f4e:	fb82 1203 	smull	r1, r2, r2, r3
 8000f52:	1092      	asrs	r2, r2, #2
 8000f54:	17db      	asrs	r3, r3, #31
 8000f56:	1ad3      	subs	r3, r2, r3
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff f9ed 	bl	8000338 <__aeabi_i2f>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	4a24      	ldr	r2, [pc, #144]	; (8000ff4 <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>)
 8000f62:	6013      	str	r3, [r2, #0]
		voltage = (256 * RxData[5] + RxData[4])/10;
 8000f64:	4b1e      	ldr	r3, [pc, #120]	; (8000fe0 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 8000f66:	795b      	ldrb	r3, [r3, #5]
 8000f68:	021b      	lsls	r3, r3, #8
 8000f6a:	4a1d      	ldr	r2, [pc, #116]	; (8000fe0 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 8000f6c:	7912      	ldrb	r2, [r2, #4]
 8000f6e:	4413      	add	r3, r2
 8000f70:	4a1f      	ldr	r2, [pc, #124]	; (8000ff0 <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 8000f72:	fb82 1203 	smull	r1, r2, r2, r3
 8000f76:	1092      	asrs	r2, r2, #2
 8000f78:	17db      	asrs	r3, r3, #31
 8000f7a:	1ad3      	subs	r3, r2, r3
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff f9db 	bl	8000338 <__aeabi_i2f>
 8000f82:	4603      	mov	r3, r0
 8000f84:	4a1c      	ldr	r2, [pc, #112]	; (8000ff8 <HAL_CAN_RxFifo0MsgPendingCallback+0xe8>)
 8000f86:	6013      	str	r3, [r2, #0]

		TxData[0] = 1;
 8000f88:	4b1c      	ldr	r3, [pc, #112]	; (8000ffc <HAL_CAN_RxFifo0MsgPendingCallback+0xec>)
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	701a      	strb	r2, [r3, #0]
		TxData[1] = 1;
 8000f8e:	4b1b      	ldr	r3, [pc, #108]	; (8000ffc <HAL_CAN_RxFifo0MsgPendingCallback+0xec>)
 8000f90:	2201      	movs	r2, #1
 8000f92:	705a      	strb	r2, [r3, #1]
		TxData[2] = (110 * (rpm / 7000));
 8000f94:	4b15      	ldr	r3, [pc, #84]	; (8000fec <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4919      	ldr	r1, [pc, #100]	; (8001000 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff fad4 	bl	8000548 <__aeabi_fdiv>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	4918      	ldr	r1, [pc, #96]	; (8001004 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff fa1b 	bl	80003e0 <__aeabi_fmul>
 8000faa:	4603      	mov	r3, r0
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff fb67 	bl	8000680 <__aeabi_f2uiz>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	b2da      	uxtb	r2, r3
 8000fb6:	4b11      	ldr	r3, [pc, #68]	; (8000ffc <HAL_CAN_RxFifo0MsgPendingCallback+0xec>)
 8000fb8:	709a      	strb	r2, [r3, #2]
		TxData[3] = 1;
 8000fba:	4b10      	ldr	r3, [pc, #64]	; (8000ffc <HAL_CAN_RxFifo0MsgPendingCallback+0xec>)
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	70da      	strb	r2, [r3, #3]
		TxData[4] = 1;
 8000fc0:	4b0e      	ldr	r3, [pc, #56]	; (8000ffc <HAL_CAN_RxFifo0MsgPendingCallback+0xec>)
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	711a      	strb	r2, [r3, #4]
		CAN_Transmit_Msg(TxData);
 8000fc6:	480d      	ldr	r0, [pc, #52]	; (8000ffc <HAL_CAN_RxFifo0MsgPendingCallback+0xec>)
 8000fc8:	f7ff fdfe 	bl	8000bc8 <CAN_Transmit_Msg>
	}
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000fcc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fd0:	480d      	ldr	r0, [pc, #52]	; (8001008 <HAL_CAN_RxFifo0MsgPendingCallback+0xf8>)
 8000fd2:	f001 faa1 	bl	8002518 <HAL_GPIO_TogglePin>
}
 8000fd6:	bf00      	nop
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	200000c0 	.word	0x200000c0
 8000fe4:	20000090 	.word	0x20000090
 8000fe8:	0cf11e05 	.word	0x0cf11e05
 8000fec:	200000b4 	.word	0x200000b4
 8000ff0:	66666667 	.word	0x66666667
 8000ff4:	200000b0 	.word	0x200000b0
 8000ff8:	200000ac 	.word	0x200000ac
 8000ffc:	200000b8 	.word	0x200000b8
 8001000:	45dac000 	.word	0x45dac000
 8001004:	42dc0000 	.word	0x42dc0000
 8001008:	40020400 	.word	0x40020400

0800100c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001010:	b672      	cpsid	i
}
 8001012:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001014:	e7fe      	b.n	8001014 <Error_Handler+0x8>
	...

08001018 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	607b      	str	r3, [r7, #4]
 8001022:	4b0f      	ldr	r3, [pc, #60]	; (8001060 <HAL_MspInit+0x48>)
 8001024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001026:	4a0e      	ldr	r2, [pc, #56]	; (8001060 <HAL_MspInit+0x48>)
 8001028:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800102c:	6453      	str	r3, [r2, #68]	; 0x44
 800102e:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <HAL_MspInit+0x48>)
 8001030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001032:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001036:	607b      	str	r3, [r7, #4]
 8001038:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	603b      	str	r3, [r7, #0]
 800103e:	4b08      	ldr	r3, [pc, #32]	; (8001060 <HAL_MspInit+0x48>)
 8001040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001042:	4a07      	ldr	r2, [pc, #28]	; (8001060 <HAL_MspInit+0x48>)
 8001044:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001048:	6413      	str	r3, [r2, #64]	; 0x40
 800104a:	4b05      	ldr	r3, [pc, #20]	; (8001060 <HAL_MspInit+0x48>)
 800104c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001052:	603b      	str	r3, [r7, #0]
 8001054:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001056:	bf00      	nop
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	bc80      	pop	{r7}
 800105e:	4770      	bx	lr
 8001060:	40023800 	.word	0x40023800

08001064 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001068:	e7fe      	b.n	8001068 <NMI_Handler+0x4>

0800106a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800106a:	b480      	push	{r7}
 800106c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800106e:	e7fe      	b.n	800106e <HardFault_Handler+0x4>

08001070 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001074:	e7fe      	b.n	8001074 <MemManage_Handler+0x4>

08001076 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001076:	b480      	push	{r7}
 8001078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800107a:	e7fe      	b.n	800107a <BusFault_Handler+0x4>

0800107c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001080:	e7fe      	b.n	8001080 <UsageFault_Handler+0x4>

08001082 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001082:	b480      	push	{r7}
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	46bd      	mov	sp, r7
 800108a:	bc80      	pop	{r7}
 800108c:	4770      	bx	lr

0800108e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800108e:	b480      	push	{r7}
 8001090:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001092:	bf00      	nop
 8001094:	46bd      	mov	sp, r7
 8001096:	bc80      	pop	{r7}
 8001098:	4770      	bx	lr

0800109a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800109a:	b480      	push	{r7}
 800109c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bc80      	pop	{r7}
 80010a4:	4770      	bx	lr

080010a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010aa:	f000 f901 	bl	80012b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}
	...

080010b4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80010b8:	4802      	ldr	r0, [pc, #8]	; (80010c4 <CAN1_RX0_IRQHandler+0x10>)
 80010ba:	f000 fd45 	bl	8001b48 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20000050 	.word	0x20000050

080010c8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010cc:	bf00      	nop
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bc80      	pop	{r7}
 80010d2:	4770      	bx	lr

080010d4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80010d8:	4b11      	ldr	r3, [pc, #68]	; (8001120 <MX_USART3_UART_Init+0x4c>)
 80010da:	4a12      	ldr	r2, [pc, #72]	; (8001124 <MX_USART3_UART_Init+0x50>)
 80010dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80010de:	4b10      	ldr	r3, [pc, #64]	; (8001120 <MX_USART3_UART_Init+0x4c>)
 80010e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80010e6:	4b0e      	ldr	r3, [pc, #56]	; (8001120 <MX_USART3_UART_Init+0x4c>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80010ec:	4b0c      	ldr	r3, [pc, #48]	; (8001120 <MX_USART3_UART_Init+0x4c>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80010f2:	4b0b      	ldr	r3, [pc, #44]	; (8001120 <MX_USART3_UART_Init+0x4c>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80010f8:	4b09      	ldr	r3, [pc, #36]	; (8001120 <MX_USART3_UART_Init+0x4c>)
 80010fa:	220c      	movs	r2, #12
 80010fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010fe:	4b08      	ldr	r3, [pc, #32]	; (8001120 <MX_USART3_UART_Init+0x4c>)
 8001100:	2200      	movs	r2, #0
 8001102:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001104:	4b06      	ldr	r3, [pc, #24]	; (8001120 <MX_USART3_UART_Init+0x4c>)
 8001106:	2200      	movs	r2, #0
 8001108:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800110a:	4805      	ldr	r0, [pc, #20]	; (8001120 <MX_USART3_UART_Init+0x4c>)
 800110c:	f001 fe8a 	bl	8002e24 <HAL_UART_Init>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001116:	f7ff ff79 	bl	800100c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	200000c8 	.word	0x200000c8
 8001124:	40004800 	.word	0x40004800

08001128 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b08a      	sub	sp, #40	; 0x28
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001130:	f107 0314 	add.w	r3, r7, #20
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	605a      	str	r2, [r3, #4]
 800113a:	609a      	str	r2, [r3, #8]
 800113c:	60da      	str	r2, [r3, #12]
 800113e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a19      	ldr	r2, [pc, #100]	; (80011ac <HAL_UART_MspInit+0x84>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d12c      	bne.n	80011a4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	613b      	str	r3, [r7, #16]
 800114e:	4b18      	ldr	r3, [pc, #96]	; (80011b0 <HAL_UART_MspInit+0x88>)
 8001150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001152:	4a17      	ldr	r2, [pc, #92]	; (80011b0 <HAL_UART_MspInit+0x88>)
 8001154:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001158:	6413      	str	r3, [r2, #64]	; 0x40
 800115a:	4b15      	ldr	r3, [pc, #84]	; (80011b0 <HAL_UART_MspInit+0x88>)
 800115c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001162:	613b      	str	r3, [r7, #16]
 8001164:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	60fb      	str	r3, [r7, #12]
 800116a:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <HAL_UART_MspInit+0x88>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	4a10      	ldr	r2, [pc, #64]	; (80011b0 <HAL_UART_MspInit+0x88>)
 8001170:	f043 0308 	orr.w	r3, r3, #8
 8001174:	6313      	str	r3, [r2, #48]	; 0x30
 8001176:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <HAL_UART_MspInit+0x88>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	f003 0308 	and.w	r3, r3, #8
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001182:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001186:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001188:	2302      	movs	r3, #2
 800118a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	2300      	movs	r3, #0
 800118e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001190:	2303      	movs	r3, #3
 8001192:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001194:	2307      	movs	r3, #7
 8001196:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001198:	f107 0314 	add.w	r3, r7, #20
 800119c:	4619      	mov	r1, r3
 800119e:	4805      	ldr	r0, [pc, #20]	; (80011b4 <HAL_UART_MspInit+0x8c>)
 80011a0:	f001 f804 	bl	80021ac <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80011a4:	bf00      	nop
 80011a6:	3728      	adds	r7, #40	; 0x28
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	40004800 	.word	0x40004800
 80011b0:	40023800 	.word	0x40023800
 80011b4:	40020c00 	.word	0x40020c00

080011b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80011b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011f0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011bc:	480d      	ldr	r0, [pc, #52]	; (80011f4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011be:	490e      	ldr	r1, [pc, #56]	; (80011f8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011c0:	4a0e      	ldr	r2, [pc, #56]	; (80011fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011c4:	e002      	b.n	80011cc <LoopCopyDataInit>

080011c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ca:	3304      	adds	r3, #4

080011cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011d0:	d3f9      	bcc.n	80011c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011d2:	4a0b      	ldr	r2, [pc, #44]	; (8001200 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011d4:	4c0b      	ldr	r4, [pc, #44]	; (8001204 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011d8:	e001      	b.n	80011de <LoopFillZerobss>

080011da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011dc:	3204      	adds	r2, #4

080011de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011e0:	d3fb      	bcc.n	80011da <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80011e2:	f7ff ff71 	bl	80010c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011e6:	f001 ff55 	bl	8003094 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011ea:	f7ff fe33 	bl	8000e54 <main>
  bx  lr
 80011ee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80011f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011f8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80011fc:	0800312c 	.word	0x0800312c
  ldr r2, =_sbss
 8001200:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001204:	20000110 	.word	0x20000110

08001208 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001208:	e7fe      	b.n	8001208 <ADC_IRQHandler>
	...

0800120c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001210:	4b0e      	ldr	r3, [pc, #56]	; (800124c <HAL_Init+0x40>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a0d      	ldr	r2, [pc, #52]	; (800124c <HAL_Init+0x40>)
 8001216:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800121a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 800121c:	4b0b      	ldr	r3, [pc, #44]	; (800124c <HAL_Init+0x40>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a0a      	ldr	r2, [pc, #40]	; (800124c <HAL_Init+0x40>)
 8001222:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001226:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001228:	4b08      	ldr	r3, [pc, #32]	; (800124c <HAL_Init+0x40>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a07      	ldr	r2, [pc, #28]	; (800124c <HAL_Init+0x40>)
 800122e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001232:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001234:	2003      	movs	r0, #3
 8001236:	f000 ff77 	bl	8002128 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800123a:	2000      	movs	r0, #0
 800123c:	f000 f808 	bl	8001250 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001240:	f7ff feea 	bl	8001018 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001244:	2300      	movs	r3, #0
}
 8001246:	4618      	mov	r0, r3
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40023c00 	.word	0x40023c00

08001250 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001258:	4b12      	ldr	r3, [pc, #72]	; (80012a4 <HAL_InitTick+0x54>)
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	4b12      	ldr	r3, [pc, #72]	; (80012a8 <HAL_InitTick+0x58>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	4619      	mov	r1, r3
 8001262:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001266:	fbb3 f3f1 	udiv	r3, r3, r1
 800126a:	fbb2 f3f3 	udiv	r3, r2, r3
 800126e:	4618      	mov	r0, r3
 8001270:	f000 ff8f 	bl	8002192 <HAL_SYSTICK_Config>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e00e      	b.n	800129c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2b0f      	cmp	r3, #15
 8001282:	d80a      	bhi.n	800129a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001284:	2200      	movs	r2, #0
 8001286:	6879      	ldr	r1, [r7, #4]
 8001288:	f04f 30ff 	mov.w	r0, #4294967295
 800128c:	f000 ff57 	bl	800213e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001290:	4a06      	ldr	r2, [pc, #24]	; (80012ac <HAL_InitTick+0x5c>)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001296:	2300      	movs	r3, #0
 8001298:	e000      	b.n	800129c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
}
 800129c:	4618      	mov	r0, r3
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	20000000 	.word	0x20000000
 80012a8:	20000008 	.word	0x20000008
 80012ac:	20000004 	.word	0x20000004

080012b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012b4:	4b05      	ldr	r3, [pc, #20]	; (80012cc <HAL_IncTick+0x1c>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	461a      	mov	r2, r3
 80012ba:	4b05      	ldr	r3, [pc, #20]	; (80012d0 <HAL_IncTick+0x20>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4413      	add	r3, r2
 80012c0:	4a03      	ldr	r2, [pc, #12]	; (80012d0 <HAL_IncTick+0x20>)
 80012c2:	6013      	str	r3, [r2, #0]
}
 80012c4:	bf00      	nop
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bc80      	pop	{r7}
 80012ca:	4770      	bx	lr
 80012cc:	20000008 	.word	0x20000008
 80012d0:	2000010c 	.word	0x2000010c

080012d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  return uwTick;
 80012d8:	4b02      	ldr	r3, [pc, #8]	; (80012e4 <HAL_GetTick+0x10>)
 80012da:	681b      	ldr	r3, [r3, #0]
}
 80012dc:	4618      	mov	r0, r3
 80012de:	46bd      	mov	sp, r7
 80012e0:	bc80      	pop	{r7}
 80012e2:	4770      	bx	lr
 80012e4:	2000010c 	.word	0x2000010c

080012e8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d101      	bne.n	80012fa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e0ed      	b.n	80014d6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001300:	b2db      	uxtb	r3, r3
 8001302:	2b00      	cmp	r3, #0
 8001304:	d102      	bne.n	800130c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f7ff fb8c 	bl	8000a24 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f042 0201 	orr.w	r2, r2, #1
 800131a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800131c:	f7ff ffda 	bl	80012d4 <HAL_GetTick>
 8001320:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001322:	e012      	b.n	800134a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001324:	f7ff ffd6 	bl	80012d4 <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	2b0a      	cmp	r3, #10
 8001330:	d90b      	bls.n	800134a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001336:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2205      	movs	r2, #5
 8001342:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e0c5      	b.n	80014d6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f003 0301 	and.w	r3, r3, #1
 8001354:	2b00      	cmp	r3, #0
 8001356:	d0e5      	beq.n	8001324 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f022 0202 	bic.w	r2, r2, #2
 8001366:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001368:	f7ff ffb4 	bl	80012d4 <HAL_GetTick>
 800136c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800136e:	e012      	b.n	8001396 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001370:	f7ff ffb0 	bl	80012d4 <HAL_GetTick>
 8001374:	4602      	mov	r2, r0
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	2b0a      	cmp	r3, #10
 800137c:	d90b      	bls.n	8001396 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001382:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2205      	movs	r2, #5
 800138e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e09f      	b.n	80014d6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f003 0302 	and.w	r3, r3, #2
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d1e5      	bne.n	8001370 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	7e1b      	ldrb	r3, [r3, #24]
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d108      	bne.n	80013be <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	e007      	b.n	80013ce <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	7e5b      	ldrb	r3, [r3, #25]
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d108      	bne.n	80013e8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	e007      	b.n	80013f8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80013f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	7e9b      	ldrb	r3, [r3, #26]
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d108      	bne.n	8001412 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f042 0220 	orr.w	r2, r2, #32
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	e007      	b.n	8001422 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f022 0220 	bic.w	r2, r2, #32
 8001420:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	7edb      	ldrb	r3, [r3, #27]
 8001426:	2b01      	cmp	r3, #1
 8001428:	d108      	bne.n	800143c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f022 0210 	bic.w	r2, r2, #16
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	e007      	b.n	800144c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f042 0210 	orr.w	r2, r2, #16
 800144a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	7f1b      	ldrb	r3, [r3, #28]
 8001450:	2b01      	cmp	r3, #1
 8001452:	d108      	bne.n	8001466 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f042 0208 	orr.w	r2, r2, #8
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	e007      	b.n	8001476 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f022 0208 	bic.w	r2, r2, #8
 8001474:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	7f5b      	ldrb	r3, [r3, #29]
 800147a:	2b01      	cmp	r3, #1
 800147c:	d108      	bne.n	8001490 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f042 0204 	orr.w	r2, r2, #4
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	e007      	b.n	80014a0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f022 0204 	bic.w	r2, r2, #4
 800149e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	689a      	ldr	r2, [r3, #8]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	431a      	orrs	r2, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	691b      	ldr	r3, [r3, #16]
 80014ae:	431a      	orrs	r2, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	695b      	ldr	r3, [r3, #20]
 80014b4:	ea42 0103 	orr.w	r1, r2, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	1e5a      	subs	r2, r3, #1
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	430a      	orrs	r2, r1
 80014c4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2200      	movs	r2, #0
 80014ca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2201      	movs	r2, #1
 80014d0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80014d4:	2300      	movs	r3, #0
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3710      	adds	r7, #16
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
	...

080014e0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b087      	sub	sp, #28
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014f6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80014f8:	7cfb      	ldrb	r3, [r7, #19]
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d003      	beq.n	8001506 <HAL_CAN_ConfigFilter+0x26>
 80014fe:	7cfb      	ldrb	r3, [r7, #19]
 8001500:	2b02      	cmp	r3, #2
 8001502:	f040 80be 	bne.w	8001682 <HAL_CAN_ConfigFilter+0x1a2>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if   defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001506:	4b65      	ldr	r3, [pc, #404]	; (800169c <HAL_CAN_ConfigFilter+0x1bc>)
 8001508:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001510:	f043 0201 	orr.w	r2, r3, #1
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if   defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001520:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001534:	021b      	lsls	r3, r3, #8
 8001536:	431a      	orrs	r2, r3
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	695b      	ldr	r3, [r3, #20]
 8001542:	f003 031f 	and.w	r3, r3, #31
 8001546:	2201      	movs	r2, #1
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	43db      	mvns	r3, r3
 8001558:	401a      	ands	r2, r3
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	69db      	ldr	r3, [r3, #28]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d123      	bne.n	80015b0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	43db      	mvns	r3, r3
 8001572:	401a      	ands	r2, r3
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	68db      	ldr	r3, [r3, #12]
 800157e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001586:	683a      	ldr	r2, [r7, #0]
 8001588:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800158a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	3248      	adds	r2, #72	; 0x48
 8001590:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80015a4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80015a6:	6979      	ldr	r1, [r7, #20]
 80015a8:	3348      	adds	r3, #72	; 0x48
 80015aa:	00db      	lsls	r3, r3, #3
 80015ac:	440b      	add	r3, r1
 80015ae:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	69db      	ldr	r3, [r3, #28]
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d122      	bne.n	80015fe <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	431a      	orrs	r2, r3
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80015d4:	683a      	ldr	r2, [r7, #0]
 80015d6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80015d8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	3248      	adds	r2, #72	; 0x48
 80015de:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80015f2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80015f4:	6979      	ldr	r1, [r7, #20]
 80015f6:	3348      	adds	r3, #72	; 0x48
 80015f8:	00db      	lsls	r3, r3, #3
 80015fa:	440b      	add	r3, r1
 80015fc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	699b      	ldr	r3, [r3, #24]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d109      	bne.n	800161a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	43db      	mvns	r3, r3
 8001610:	401a      	ands	r2, r3
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001618:	e007      	b.n	800162a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	431a      	orrs	r2, r3
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	691b      	ldr	r3, [r3, #16]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d109      	bne.n	8001646 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	43db      	mvns	r3, r3
 800163c:	401a      	ands	r2, r3
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001644:	e007      	b.n	8001656 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	431a      	orrs	r2, r3
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	6a1b      	ldr	r3, [r3, #32]
 800165a:	2b01      	cmp	r3, #1
 800165c:	d107      	bne.n	800166e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	431a      	orrs	r2, r3
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001674:	f023 0201 	bic.w	r2, r3, #1
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800167e:	2300      	movs	r3, #0
 8001680:	e006      	b.n	8001690 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001686:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
  }
}
 8001690:	4618      	mov	r0, r3
 8001692:	371c      	adds	r7, #28
 8001694:	46bd      	mov	sp, r7
 8001696:	bc80      	pop	{r7}
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	40006400 	.word	0x40006400

080016a0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d12e      	bne.n	8001712 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2202      	movs	r2, #2
 80016b8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f022 0201 	bic.w	r2, r2, #1
 80016ca:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80016cc:	f7ff fe02 	bl	80012d4 <HAL_GetTick>
 80016d0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80016d2:	e012      	b.n	80016fa <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016d4:	f7ff fdfe 	bl	80012d4 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b0a      	cmp	r3, #10
 80016e0:	d90b      	bls.n	80016fa <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2205      	movs	r2, #5
 80016f2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e012      	b.n	8001720 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f003 0301 	and.w	r3, r3, #1
 8001704:	2b00      	cmp	r3, #0
 8001706:	d1e5      	bne.n	80016d4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2200      	movs	r2, #0
 800170c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800170e:	2300      	movs	r3, #0
 8001710:	e006      	b.n	8001720 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001716:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
  }
}
 8001720:	4618      	mov	r0, r3
 8001722:	3710      	adds	r7, #16
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}

08001728 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001728:	b480      	push	{r7}
 800172a:	b089      	sub	sp, #36	; 0x24
 800172c:	af00      	add	r7, sp, #0
 800172e:	60f8      	str	r0, [r7, #12]
 8001730:	60b9      	str	r1, [r7, #8]
 8001732:	607a      	str	r2, [r7, #4]
 8001734:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	f893 3020 	ldrb.w	r3, [r3, #32]
 800173c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001746:	7ffb      	ldrb	r3, [r7, #31]
 8001748:	2b01      	cmp	r3, #1
 800174a:	d003      	beq.n	8001754 <HAL_CAN_AddTxMessage+0x2c>
 800174c:	7ffb      	ldrb	r3, [r7, #31]
 800174e:	2b02      	cmp	r3, #2
 8001750:	f040 80b8 	bne.w	80018c4 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d10a      	bne.n	8001774 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800175e:	69bb      	ldr	r3, [r7, #24]
 8001760:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001764:	2b00      	cmp	r3, #0
 8001766:	d105      	bne.n	8001774 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800176e:	2b00      	cmp	r3, #0
 8001770:	f000 80a0 	beq.w	80018b4 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	0e1b      	lsrs	r3, r3, #24
 8001778:	f003 0303 	and.w	r3, r3, #3
 800177c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	2b02      	cmp	r3, #2
 8001782:	d907      	bls.n	8001794 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001788:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e09e      	b.n	80018d2 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001794:	2201      	movs	r2, #1
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	409a      	lsls	r2, r3
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d10d      	bne.n	80017c2 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80017b0:	68f9      	ldr	r1, [r7, #12]
 80017b2:	6809      	ldr	r1, [r1, #0]
 80017b4:	431a      	orrs	r2, r3
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	3318      	adds	r3, #24
 80017ba:	011b      	lsls	r3, r3, #4
 80017bc:	440b      	add	r3, r1
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	e00f      	b.n	80017e2 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80017cc:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80017d2:	68f9      	ldr	r1, [r7, #12]
 80017d4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80017d6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	3318      	adds	r3, #24
 80017dc:	011b      	lsls	r3, r3, #4
 80017de:	440b      	add	r3, r1
 80017e0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	6819      	ldr	r1, [r3, #0]
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	691a      	ldr	r2, [r3, #16]
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	3318      	adds	r3, #24
 80017ee:	011b      	lsls	r3, r3, #4
 80017f0:	440b      	add	r3, r1
 80017f2:	3304      	adds	r3, #4
 80017f4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	7d1b      	ldrb	r3, [r3, #20]
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d111      	bne.n	8001822 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	3318      	adds	r3, #24
 8001806:	011b      	lsls	r3, r3, #4
 8001808:	4413      	add	r3, r2
 800180a:	3304      	adds	r3, #4
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	68fa      	ldr	r2, [r7, #12]
 8001810:	6811      	ldr	r1, [r2, #0]
 8001812:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	3318      	adds	r3, #24
 800181a:	011b      	lsls	r3, r3, #4
 800181c:	440b      	add	r3, r1
 800181e:	3304      	adds	r3, #4
 8001820:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	3307      	adds	r3, #7
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	061a      	lsls	r2, r3, #24
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	3306      	adds	r3, #6
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	041b      	lsls	r3, r3, #16
 8001832:	431a      	orrs	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	3305      	adds	r3, #5
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	021b      	lsls	r3, r3, #8
 800183c:	4313      	orrs	r3, r2
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	3204      	adds	r2, #4
 8001842:	7812      	ldrb	r2, [r2, #0]
 8001844:	4610      	mov	r0, r2
 8001846:	68fa      	ldr	r2, [r7, #12]
 8001848:	6811      	ldr	r1, [r2, #0]
 800184a:	ea43 0200 	orr.w	r2, r3, r0
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	011b      	lsls	r3, r3, #4
 8001852:	440b      	add	r3, r1
 8001854:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001858:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	3303      	adds	r3, #3
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	061a      	lsls	r2, r3, #24
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	3302      	adds	r3, #2
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	041b      	lsls	r3, r3, #16
 800186a:	431a      	orrs	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	3301      	adds	r3, #1
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	021b      	lsls	r3, r3, #8
 8001874:	4313      	orrs	r3, r2
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	7812      	ldrb	r2, [r2, #0]
 800187a:	4610      	mov	r0, r2
 800187c:	68fa      	ldr	r2, [r7, #12]
 800187e:	6811      	ldr	r1, [r2, #0]
 8001880:	ea43 0200 	orr.w	r2, r3, r0
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	011b      	lsls	r3, r3, #4
 8001888:	440b      	add	r3, r1
 800188a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800188e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	3318      	adds	r3, #24
 8001898:	011b      	lsls	r3, r3, #4
 800189a:	4413      	add	r3, r2
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	68fa      	ldr	r2, [r7, #12]
 80018a0:	6811      	ldr	r1, [r2, #0]
 80018a2:	f043 0201 	orr.w	r2, r3, #1
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	3318      	adds	r3, #24
 80018aa:	011b      	lsls	r3, r3, #4
 80018ac:	440b      	add	r3, r1
 80018ae:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80018b0:	2300      	movs	r3, #0
 80018b2:	e00e      	b.n	80018d2 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e006      	b.n	80018d2 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
  }
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3724      	adds	r7, #36	; 0x24
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bc80      	pop	{r7}
 80018da:	4770      	bx	lr

080018dc <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80018dc:	b480      	push	{r7}
 80018de:	b087      	sub	sp, #28
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
 80018e8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018f0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80018f2:	7dfb      	ldrb	r3, [r7, #23]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d003      	beq.n	8001900 <HAL_CAN_GetRxMessage+0x24>
 80018f8:	7dfb      	ldrb	r3, [r7, #23]
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	f040 80f3 	bne.w	8001ae6 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d10e      	bne.n	8001924 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	f003 0303 	and.w	r3, r3, #3
 8001910:	2b00      	cmp	r3, #0
 8001912:	d116      	bne.n	8001942 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001918:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e0e7      	b.n	8001af4 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	691b      	ldr	r3, [r3, #16]
 800192a:	f003 0303 	and.w	r3, r3, #3
 800192e:	2b00      	cmp	r3, #0
 8001930:	d107      	bne.n	8001942 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001936:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e0d8      	b.n	8001af4 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	331b      	adds	r3, #27
 800194a:	011b      	lsls	r3, r3, #4
 800194c:	4413      	add	r3, r2
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0204 	and.w	r2, r3, #4
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d10c      	bne.n	800197a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	331b      	adds	r3, #27
 8001968:	011b      	lsls	r3, r3, #4
 800196a:	4413      	add	r3, r2
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	0d5b      	lsrs	r3, r3, #21
 8001970:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	e00b      	b.n	8001992 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	331b      	adds	r3, #27
 8001982:	011b      	lsls	r3, r3, #4
 8001984:	4413      	add	r3, r2
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	08db      	lsrs	r3, r3, #3
 800198a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	331b      	adds	r3, #27
 800199a:	011b      	lsls	r3, r3, #4
 800199c:	4413      	add	r3, r2
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0202 	and.w	r2, r3, #2
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	331b      	adds	r3, #27
 80019b0:	011b      	lsls	r3, r3, #4
 80019b2:	4413      	add	r3, r2
 80019b4:	3304      	adds	r3, #4
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 020f 	and.w	r2, r3, #15
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	331b      	adds	r3, #27
 80019c8:	011b      	lsls	r3, r3, #4
 80019ca:	4413      	add	r3, r2
 80019cc:	3304      	adds	r3, #4
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	0a1b      	lsrs	r3, r3, #8
 80019d2:	b2da      	uxtb	r2, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	331b      	adds	r3, #27
 80019e0:	011b      	lsls	r3, r3, #4
 80019e2:	4413      	add	r3, r2
 80019e4:	3304      	adds	r3, #4
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	0c1b      	lsrs	r3, r3, #16
 80019ea:	b29a      	uxth	r2, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	011b      	lsls	r3, r3, #4
 80019f8:	4413      	add	r3, r2
 80019fa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	b2da      	uxtb	r2, r3
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	011b      	lsls	r3, r3, #4
 8001a0e:	4413      	add	r3, r2
 8001a10:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	0a1a      	lsrs	r2, r3, #8
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	b2d2      	uxtb	r2, r2
 8001a1e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	011b      	lsls	r3, r3, #4
 8001a28:	4413      	add	r3, r2
 8001a2a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	0c1a      	lsrs	r2, r3, #16
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	3302      	adds	r3, #2
 8001a36:	b2d2      	uxtb	r2, r2
 8001a38:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	011b      	lsls	r3, r3, #4
 8001a42:	4413      	add	r3, r2
 8001a44:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	0e1a      	lsrs	r2, r3, #24
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	3303      	adds	r3, #3
 8001a50:	b2d2      	uxtb	r2, r2
 8001a52:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	011b      	lsls	r3, r3, #4
 8001a5c:	4413      	add	r3, r2
 8001a5e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	3304      	adds	r3, #4
 8001a68:	b2d2      	uxtb	r2, r2
 8001a6a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	011b      	lsls	r3, r3, #4
 8001a74:	4413      	add	r3, r2
 8001a76:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	0a1a      	lsrs	r2, r3, #8
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	3305      	adds	r3, #5
 8001a82:	b2d2      	uxtb	r2, r2
 8001a84:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	011b      	lsls	r3, r3, #4
 8001a8e:	4413      	add	r3, r2
 8001a90:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	0c1a      	lsrs	r2, r3, #16
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	3306      	adds	r3, #6
 8001a9c:	b2d2      	uxtb	r2, r2
 8001a9e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	011b      	lsls	r3, r3, #4
 8001aa8:	4413      	add	r3, r2
 8001aaa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	0e1a      	lsrs	r2, r3, #24
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	3307      	adds	r3, #7
 8001ab6:	b2d2      	uxtb	r2, r2
 8001ab8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d108      	bne.n	8001ad2 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	68da      	ldr	r2, [r3, #12]
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f042 0220 	orr.w	r2, r2, #32
 8001ace:	60da      	str	r2, [r3, #12]
 8001ad0:	e007      	b.n	8001ae2 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	691a      	ldr	r2, [r3, #16]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f042 0220 	orr.w	r2, r2, #32
 8001ae0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	e006      	b.n	8001af4 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aea:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
  }
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	371c      	adds	r7, #28
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bc80      	pop	{r7}
 8001afc:	4770      	bx	lr

08001afe <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001afe:	b480      	push	{r7}
 8001b00:	b085      	sub	sp, #20
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
 8001b06:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b0e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001b10:	7bfb      	ldrb	r3, [r7, #15]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d002      	beq.n	8001b1c <HAL_CAN_ActivateNotification+0x1e>
 8001b16:	7bfb      	ldrb	r3, [r7, #15]
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d109      	bne.n	8001b30 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	6959      	ldr	r1, [r3, #20]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	683a      	ldr	r2, [r7, #0]
 8001b28:	430a      	orrs	r2, r1
 8001b2a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	e006      	b.n	8001b3e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b34:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
  }
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3714      	adds	r7, #20
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bc80      	pop	{r7}
 8001b46:	4770      	bx	lr

08001b48 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b08a      	sub	sp, #40	; 0x28
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001b50:	2300      	movs	r3, #0
 8001b52:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	695b      	ldr	r3, [r3, #20]
 8001b5a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	68db      	ldr	r3, [r3, #12]
 8001b72:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	691b      	ldr	r3, [r3, #16]
 8001b7a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	699b      	ldr	r3, [r3, #24]
 8001b82:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001b84:	6a3b      	ldr	r3, [r7, #32]
 8001b86:	f003 0301 	and.w	r3, r3, #1
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d07c      	beq.n	8001c88 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	f003 0301 	and.w	r3, r3, #1
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d023      	beq.n	8001be0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	f003 0302 	and.w	r3, r3, #2
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d003      	beq.n	8001bb2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f000 f983 	bl	8001eb6 <HAL_CAN_TxMailbox0CompleteCallback>
 8001bb0:	e016      	b.n	8001be0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	f003 0304 	and.w	r3, r3, #4
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d004      	beq.n	8001bc6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001bc2:	627b      	str	r3, [r7, #36]	; 0x24
 8001bc4:	e00c      	b.n	8001be0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	f003 0308 	and.w	r3, r3, #8
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d004      	beq.n	8001bda <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001bd6:	627b      	str	r3, [r7, #36]	; 0x24
 8001bd8:	e002      	b.n	8001be0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f000 f986 	bl	8001eec <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d024      	beq.n	8001c34 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bf2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d003      	beq.n	8001c06 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f000 f962 	bl	8001ec8 <HAL_CAN_TxMailbox1CompleteCallback>
 8001c04:	e016      	b.n	8001c34 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001c06:	69bb      	ldr	r3, [r7, #24]
 8001c08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d004      	beq.n	8001c1a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c12:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c16:	627b      	str	r3, [r7, #36]	; 0x24
 8001c18:	e00c      	b.n	8001c34 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d004      	beq.n	8001c2e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c2a:	627b      	str	r3, [r7, #36]	; 0x24
 8001c2c:	e002      	b.n	8001c34 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f000 f965 	bl	8001efe <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001c34:	69bb      	ldr	r3, [r7, #24]
 8001c36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d024      	beq.n	8001c88 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001c46:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d003      	beq.n	8001c5a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f000 f941 	bl	8001eda <HAL_CAN_TxMailbox2CompleteCallback>
 8001c58:	e016      	b.n	8001c88 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d004      	beq.n	8001c6e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c6a:	627b      	str	r3, [r7, #36]	; 0x24
 8001c6c:	e00c      	b.n	8001c88 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d004      	beq.n	8001c82 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c7e:	627b      	str	r3, [r7, #36]	; 0x24
 8001c80:	e002      	b.n	8001c88 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f000 f944 	bl	8001f10 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001c88:	6a3b      	ldr	r3, [r7, #32]
 8001c8a:	f003 0308 	and.w	r3, r3, #8
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d00c      	beq.n	8001cac <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	f003 0310 	and.w	r3, r3, #16
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d007      	beq.n	8001cac <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ca2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2210      	movs	r2, #16
 8001caa:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001cac:	6a3b      	ldr	r3, [r7, #32]
 8001cae:	f003 0304 	and.w	r3, r3, #4
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d00b      	beq.n	8001cce <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	f003 0308 	and.w	r3, r3, #8
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d006      	beq.n	8001cce <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2208      	movs	r2, #8
 8001cc6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f000 f92a 	bl	8001f22 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001cce:	6a3b      	ldr	r3, [r7, #32]
 8001cd0:	f003 0302 	and.w	r3, r3, #2
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d009      	beq.n	8001cec <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	f003 0303 	and.w	r3, r3, #3
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d002      	beq.n	8001cec <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f7ff f912 	bl	8000f10 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001cec:	6a3b      	ldr	r3, [r7, #32]
 8001cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d00c      	beq.n	8001d10 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	f003 0310 	and.w	r3, r3, #16
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d007      	beq.n	8001d10 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d06:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2210      	movs	r2, #16
 8001d0e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001d10:	6a3b      	ldr	r3, [r7, #32]
 8001d12:	f003 0320 	and.w	r3, r3, #32
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d00b      	beq.n	8001d32 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	f003 0308 	and.w	r3, r3, #8
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d006      	beq.n	8001d32 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2208      	movs	r2, #8
 8001d2a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f000 f90a 	bl	8001f46 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001d32:	6a3b      	ldr	r3, [r7, #32]
 8001d34:	f003 0310 	and.w	r3, r3, #16
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d009      	beq.n	8001d50 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	691b      	ldr	r3, [r3, #16]
 8001d42:	f003 0303 	and.w	r3, r3, #3
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d002      	beq.n	8001d50 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f000 f8f2 	bl	8001f34 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001d50:	6a3b      	ldr	r3, [r7, #32]
 8001d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d00b      	beq.n	8001d72 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	f003 0310 	and.w	r3, r3, #16
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d006      	beq.n	8001d72 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2210      	movs	r2, #16
 8001d6a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f000 f8f3 	bl	8001f58 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001d72:	6a3b      	ldr	r3, [r7, #32]
 8001d74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d00b      	beq.n	8001d94 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	f003 0308 	and.w	r3, r3, #8
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d006      	beq.n	8001d94 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2208      	movs	r2, #8
 8001d8c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f000 f8eb 	bl	8001f6a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001d94:	6a3b      	ldr	r3, [r7, #32]
 8001d96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d07b      	beq.n	8001e96 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	f003 0304 	and.w	r3, r3, #4
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d072      	beq.n	8001e8e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001da8:	6a3b      	ldr	r3, [r7, #32]
 8001daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d008      	beq.n	8001dc4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d003      	beq.n	8001dc4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dbe:	f043 0301 	orr.w	r3, r3, #1
 8001dc2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001dc4:	6a3b      	ldr	r3, [r7, #32]
 8001dc6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d008      	beq.n	8001de0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d003      	beq.n	8001de0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dda:	f043 0302 	orr.w	r3, r3, #2
 8001dde:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001de0:	6a3b      	ldr	r3, [r7, #32]
 8001de2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d008      	beq.n	8001dfc <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d003      	beq.n	8001dfc <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df6:	f043 0304 	orr.w	r3, r3, #4
 8001dfa:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001dfc:	6a3b      	ldr	r3, [r7, #32]
 8001dfe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d043      	beq.n	8001e8e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d03e      	beq.n	8001e8e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e16:	2b60      	cmp	r3, #96	; 0x60
 8001e18:	d02b      	beq.n	8001e72 <HAL_CAN_IRQHandler+0x32a>
 8001e1a:	2b60      	cmp	r3, #96	; 0x60
 8001e1c:	d82e      	bhi.n	8001e7c <HAL_CAN_IRQHandler+0x334>
 8001e1e:	2b50      	cmp	r3, #80	; 0x50
 8001e20:	d022      	beq.n	8001e68 <HAL_CAN_IRQHandler+0x320>
 8001e22:	2b50      	cmp	r3, #80	; 0x50
 8001e24:	d82a      	bhi.n	8001e7c <HAL_CAN_IRQHandler+0x334>
 8001e26:	2b40      	cmp	r3, #64	; 0x40
 8001e28:	d019      	beq.n	8001e5e <HAL_CAN_IRQHandler+0x316>
 8001e2a:	2b40      	cmp	r3, #64	; 0x40
 8001e2c:	d826      	bhi.n	8001e7c <HAL_CAN_IRQHandler+0x334>
 8001e2e:	2b30      	cmp	r3, #48	; 0x30
 8001e30:	d010      	beq.n	8001e54 <HAL_CAN_IRQHandler+0x30c>
 8001e32:	2b30      	cmp	r3, #48	; 0x30
 8001e34:	d822      	bhi.n	8001e7c <HAL_CAN_IRQHandler+0x334>
 8001e36:	2b10      	cmp	r3, #16
 8001e38:	d002      	beq.n	8001e40 <HAL_CAN_IRQHandler+0x2f8>
 8001e3a:	2b20      	cmp	r3, #32
 8001e3c:	d005      	beq.n	8001e4a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001e3e:	e01d      	b.n	8001e7c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e42:	f043 0308 	orr.w	r3, r3, #8
 8001e46:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e48:	e019      	b.n	8001e7e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4c:	f043 0310 	orr.w	r3, r3, #16
 8001e50:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e52:	e014      	b.n	8001e7e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e56:	f043 0320 	orr.w	r3, r3, #32
 8001e5a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e5c:	e00f      	b.n	8001e7e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e64:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e66:	e00a      	b.n	8001e7e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e6e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e70:	e005      	b.n	8001e7e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e78:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e7a:	e000      	b.n	8001e7e <HAL_CAN_IRQHandler+0x336>
            break;
 8001e7c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	699a      	ldr	r2, [r3, #24]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001e8c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2204      	movs	r2, #4
 8001e94:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d008      	beq.n	8001eae <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea2:	431a      	orrs	r2, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f000 f867 	bl	8001f7c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001eae:	bf00      	nop
 8001eb0:	3728      	adds	r7, #40	; 0x28
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	b083      	sub	sp, #12
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001ebe:	bf00      	nop
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bc80      	pop	{r7}
 8001ec6:	4770      	bx	lr

08001ec8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001ed0:	bf00      	nop
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bc80      	pop	{r7}
 8001ed8:	4770      	bx	lr

08001eda <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001eda:	b480      	push	{r7}
 8001edc:	b083      	sub	sp, #12
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001ee2:	bf00      	nop
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bc80      	pop	{r7}
 8001eea:	4770      	bx	lr

08001eec <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bc80      	pop	{r7}
 8001efc:	4770      	bx	lr

08001efe <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001efe:	b480      	push	{r7}
 8001f00:	b083      	sub	sp, #12
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001f06:	bf00      	nop
 8001f08:	370c      	adds	r7, #12
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bc80      	pop	{r7}
 8001f0e:	4770      	bx	lr

08001f10 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001f18:	bf00      	nop
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bc80      	pop	{r7}
 8001f20:	4770      	bx	lr

08001f22 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001f22:	b480      	push	{r7}
 8001f24:	b083      	sub	sp, #12
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001f2a:	bf00      	nop
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bc80      	pop	{r7}
 8001f32:	4770      	bx	lr

08001f34 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001f3c:	bf00      	nop
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bc80      	pop	{r7}
 8001f44:	4770      	bx	lr

08001f46 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001f46:	b480      	push	{r7}
 8001f48:	b083      	sub	sp, #12
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001f4e:	bf00      	nop
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bc80      	pop	{r7}
 8001f56:	4770      	bx	lr

08001f58 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001f60:	bf00      	nop
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bc80      	pop	{r7}
 8001f68:	4770      	bx	lr

08001f6a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	b083      	sub	sp, #12
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001f72:	bf00      	nop
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bc80      	pop	{r7}
 8001f7a:	4770      	bx	lr

08001f7c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001f84:	bf00      	nop
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bc80      	pop	{r7}
 8001f8c:	4770      	bx	lr
	...

08001f90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f003 0307 	and.w	r3, r3, #7
 8001f9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fa0:	4b0c      	ldr	r3, [pc, #48]	; (8001fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fa6:	68ba      	ldr	r2, [r7, #8]
 8001fa8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fac:	4013      	ands	r3, r2
 8001fae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fc2:	4a04      	ldr	r2, [pc, #16]	; (8001fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	60d3      	str	r3, [r2, #12]
}
 8001fc8:	bf00      	nop
 8001fca:	3714      	adds	r7, #20
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bc80      	pop	{r7}
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	e000ed00 	.word	0xe000ed00

08001fd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fdc:	4b04      	ldr	r3, [pc, #16]	; (8001ff0 <__NVIC_GetPriorityGrouping+0x18>)
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	0a1b      	lsrs	r3, r3, #8
 8001fe2:	f003 0307 	and.w	r3, r3, #7
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bc80      	pop	{r7}
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	e000ed00 	.word	0xe000ed00

08001ff4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002002:	2b00      	cmp	r3, #0
 8002004:	db0b      	blt.n	800201e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002006:	79fb      	ldrb	r3, [r7, #7]
 8002008:	f003 021f 	and.w	r2, r3, #31
 800200c:	4906      	ldr	r1, [pc, #24]	; (8002028 <__NVIC_EnableIRQ+0x34>)
 800200e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002012:	095b      	lsrs	r3, r3, #5
 8002014:	2001      	movs	r0, #1
 8002016:	fa00 f202 	lsl.w	r2, r0, r2
 800201a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800201e:	bf00      	nop
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	bc80      	pop	{r7}
 8002026:	4770      	bx	lr
 8002028:	e000e100 	.word	0xe000e100

0800202c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	4603      	mov	r3, r0
 8002034:	6039      	str	r1, [r7, #0]
 8002036:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203c:	2b00      	cmp	r3, #0
 800203e:	db0a      	blt.n	8002056 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	b2da      	uxtb	r2, r3
 8002044:	490c      	ldr	r1, [pc, #48]	; (8002078 <__NVIC_SetPriority+0x4c>)
 8002046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204a:	0112      	lsls	r2, r2, #4
 800204c:	b2d2      	uxtb	r2, r2
 800204e:	440b      	add	r3, r1
 8002050:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002054:	e00a      	b.n	800206c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	b2da      	uxtb	r2, r3
 800205a:	4908      	ldr	r1, [pc, #32]	; (800207c <__NVIC_SetPriority+0x50>)
 800205c:	79fb      	ldrb	r3, [r7, #7]
 800205e:	f003 030f 	and.w	r3, r3, #15
 8002062:	3b04      	subs	r3, #4
 8002064:	0112      	lsls	r2, r2, #4
 8002066:	b2d2      	uxtb	r2, r2
 8002068:	440b      	add	r3, r1
 800206a:	761a      	strb	r2, [r3, #24]
}
 800206c:	bf00      	nop
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	bc80      	pop	{r7}
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	e000e100 	.word	0xe000e100
 800207c:	e000ed00 	.word	0xe000ed00

08002080 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002080:	b480      	push	{r7}
 8002082:	b089      	sub	sp, #36	; 0x24
 8002084:	af00      	add	r7, sp, #0
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	60b9      	str	r1, [r7, #8]
 800208a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f003 0307 	and.w	r3, r3, #7
 8002092:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	f1c3 0307 	rsb	r3, r3, #7
 800209a:	2b04      	cmp	r3, #4
 800209c:	bf28      	it	cs
 800209e:	2304      	movcs	r3, #4
 80020a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	3304      	adds	r3, #4
 80020a6:	2b06      	cmp	r3, #6
 80020a8:	d902      	bls.n	80020b0 <NVIC_EncodePriority+0x30>
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	3b03      	subs	r3, #3
 80020ae:	e000      	b.n	80020b2 <NVIC_EncodePriority+0x32>
 80020b0:	2300      	movs	r3, #0
 80020b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020b4:	f04f 32ff 	mov.w	r2, #4294967295
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	fa02 f303 	lsl.w	r3, r2, r3
 80020be:	43da      	mvns	r2, r3
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	401a      	ands	r2, r3
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020c8:	f04f 31ff 	mov.w	r1, #4294967295
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	fa01 f303 	lsl.w	r3, r1, r3
 80020d2:	43d9      	mvns	r1, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020d8:	4313      	orrs	r3, r2
         );
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3724      	adds	r7, #36	; 0x24
 80020de:	46bd      	mov	sp, r7
 80020e0:	bc80      	pop	{r7}
 80020e2:	4770      	bx	lr

080020e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	3b01      	subs	r3, #1
 80020f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020f4:	d301      	bcc.n	80020fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020f6:	2301      	movs	r3, #1
 80020f8:	e00f      	b.n	800211a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020fa:	4a0a      	ldr	r2, [pc, #40]	; (8002124 <SysTick_Config+0x40>)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	3b01      	subs	r3, #1
 8002100:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002102:	210f      	movs	r1, #15
 8002104:	f04f 30ff 	mov.w	r0, #4294967295
 8002108:	f7ff ff90 	bl	800202c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800210c:	4b05      	ldr	r3, [pc, #20]	; (8002124 <SysTick_Config+0x40>)
 800210e:	2200      	movs	r2, #0
 8002110:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002112:	4b04      	ldr	r3, [pc, #16]	; (8002124 <SysTick_Config+0x40>)
 8002114:	2207      	movs	r2, #7
 8002116:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	e000e010 	.word	0xe000e010

08002128 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f7ff ff2d 	bl	8001f90 <__NVIC_SetPriorityGrouping>
}
 8002136:	bf00      	nop
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}

0800213e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800213e:	b580      	push	{r7, lr}
 8002140:	b086      	sub	sp, #24
 8002142:	af00      	add	r7, sp, #0
 8002144:	4603      	mov	r3, r0
 8002146:	60b9      	str	r1, [r7, #8]
 8002148:	607a      	str	r2, [r7, #4]
 800214a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800214c:	2300      	movs	r3, #0
 800214e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002150:	f7ff ff42 	bl	8001fd8 <__NVIC_GetPriorityGrouping>
 8002154:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	68b9      	ldr	r1, [r7, #8]
 800215a:	6978      	ldr	r0, [r7, #20]
 800215c:	f7ff ff90 	bl	8002080 <NVIC_EncodePriority>
 8002160:	4602      	mov	r2, r0
 8002162:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002166:	4611      	mov	r1, r2
 8002168:	4618      	mov	r0, r3
 800216a:	f7ff ff5f 	bl	800202c <__NVIC_SetPriority>
}
 800216e:	bf00      	nop
 8002170:	3718      	adds	r7, #24
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002176:	b580      	push	{r7, lr}
 8002178:	b082      	sub	sp, #8
 800217a:	af00      	add	r7, sp, #0
 800217c:	4603      	mov	r3, r0
 800217e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002180:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002184:	4618      	mov	r0, r3
 8002186:	f7ff ff35 	bl	8001ff4 <__NVIC_EnableIRQ>
}
 800218a:	bf00      	nop
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002192:	b580      	push	{r7, lr}
 8002194:	b082      	sub	sp, #8
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f7ff ffa2 	bl	80020e4 <SysTick_Config>
 80021a0:	4603      	mov	r3, r0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
	...

080021ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b087      	sub	sp, #28
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021b6:	2300      	movs	r3, #0
 80021b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021ba:	e16f      	b.n	800249c <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	2101      	movs	r1, #1
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	fa01 f303 	lsl.w	r3, r1, r3
 80021c8:	4013      	ands	r3, r2
 80021ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	f000 8161 	beq.w	8002496 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f003 0303 	and.w	r3, r3, #3
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d005      	beq.n	80021ec <HAL_GPIO_Init+0x40>
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f003 0303 	and.w	r3, r3, #3
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d130      	bne.n	800224e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	2203      	movs	r2, #3
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	43db      	mvns	r3, r3
 80021fe:	693a      	ldr	r2, [r7, #16]
 8002200:	4013      	ands	r3, r2
 8002202:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	68da      	ldr	r2, [r3, #12]
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	fa02 f303 	lsl.w	r3, r2, r3
 8002210:	693a      	ldr	r2, [r7, #16]
 8002212:	4313      	orrs	r3, r2
 8002214:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	693a      	ldr	r2, [r7, #16]
 800221a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002222:	2201      	movs	r2, #1
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	fa02 f303 	lsl.w	r3, r2, r3
 800222a:	43db      	mvns	r3, r3
 800222c:	693a      	ldr	r2, [r7, #16]
 800222e:	4013      	ands	r3, r2
 8002230:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	091b      	lsrs	r3, r3, #4
 8002238:	f003 0201 	and.w	r2, r3, #1
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	fa02 f303 	lsl.w	r3, r2, r3
 8002242:	693a      	ldr	r2, [r7, #16]
 8002244:	4313      	orrs	r3, r2
 8002246:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	693a      	ldr	r2, [r7, #16]
 800224c:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f003 0303 	and.w	r3, r3, #3
 8002256:	2b03      	cmp	r3, #3
 8002258:	d017      	beq.n	800228a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	2203      	movs	r2, #3
 8002266:	fa02 f303 	lsl.w	r3, r2, r3
 800226a:	43db      	mvns	r3, r3
 800226c:	693a      	ldr	r2, [r7, #16]
 800226e:	4013      	ands	r3, r2
 8002270:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	689a      	ldr	r2, [r3, #8]
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	fa02 f303 	lsl.w	r3, r2, r3
 800227e:	693a      	ldr	r2, [r7, #16]
 8002280:	4313      	orrs	r3, r2
 8002282:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	693a      	ldr	r2, [r7, #16]
 8002288:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f003 0303 	and.w	r3, r3, #3
 8002292:	2b02      	cmp	r3, #2
 8002294:	d123      	bne.n	80022de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	08da      	lsrs	r2, r3, #3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	3208      	adds	r2, #8
 800229e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	f003 0307 	and.w	r3, r3, #7
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	220f      	movs	r2, #15
 80022ae:	fa02 f303 	lsl.w	r3, r2, r3
 80022b2:	43db      	mvns	r3, r3
 80022b4:	693a      	ldr	r2, [r7, #16]
 80022b6:	4013      	ands	r3, r2
 80022b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	691a      	ldr	r2, [r3, #16]
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	f003 0307 	and.w	r3, r3, #7
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ca:	693a      	ldr	r2, [r7, #16]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	08da      	lsrs	r2, r3, #3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	3208      	adds	r2, #8
 80022d8:	6939      	ldr	r1, [r7, #16]
 80022da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	2203      	movs	r2, #3
 80022ea:	fa02 f303 	lsl.w	r3, r2, r3
 80022ee:	43db      	mvns	r3, r3
 80022f0:	693a      	ldr	r2, [r7, #16]
 80022f2:	4013      	ands	r3, r2
 80022f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f003 0203 	and.w	r2, r3, #3
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	fa02 f303 	lsl.w	r3, r2, r3
 8002306:	693a      	ldr	r2, [r7, #16]
 8002308:	4313      	orrs	r3, r2
 800230a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	693a      	ldr	r2, [r7, #16]
 8002310:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800231a:	2b00      	cmp	r3, #0
 800231c:	f000 80bb 	beq.w	8002496 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002320:	2300      	movs	r3, #0
 8002322:	60bb      	str	r3, [r7, #8]
 8002324:	4b64      	ldr	r3, [pc, #400]	; (80024b8 <HAL_GPIO_Init+0x30c>)
 8002326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002328:	4a63      	ldr	r2, [pc, #396]	; (80024b8 <HAL_GPIO_Init+0x30c>)
 800232a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800232e:	6453      	str	r3, [r2, #68]	; 0x44
 8002330:	4b61      	ldr	r3, [pc, #388]	; (80024b8 <HAL_GPIO_Init+0x30c>)
 8002332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002334:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002338:	60bb      	str	r3, [r7, #8]
 800233a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800233c:	4a5f      	ldr	r2, [pc, #380]	; (80024bc <HAL_GPIO_Init+0x310>)
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	089b      	lsrs	r3, r3, #2
 8002342:	3302      	adds	r3, #2
 8002344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002348:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	f003 0303 	and.w	r3, r3, #3
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	220f      	movs	r2, #15
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	43db      	mvns	r3, r3
 800235a:	693a      	ldr	r2, [r7, #16]
 800235c:	4013      	ands	r3, r2
 800235e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	4a57      	ldr	r2, [pc, #348]	; (80024c0 <HAL_GPIO_Init+0x314>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d031      	beq.n	80023cc <HAL_GPIO_Init+0x220>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	4a56      	ldr	r2, [pc, #344]	; (80024c4 <HAL_GPIO_Init+0x318>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d02b      	beq.n	80023c8 <HAL_GPIO_Init+0x21c>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	4a55      	ldr	r2, [pc, #340]	; (80024c8 <HAL_GPIO_Init+0x31c>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d025      	beq.n	80023c4 <HAL_GPIO_Init+0x218>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	4a54      	ldr	r2, [pc, #336]	; (80024cc <HAL_GPIO_Init+0x320>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d01f      	beq.n	80023c0 <HAL_GPIO_Init+0x214>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	4a53      	ldr	r2, [pc, #332]	; (80024d0 <HAL_GPIO_Init+0x324>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d019      	beq.n	80023bc <HAL_GPIO_Init+0x210>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	4a52      	ldr	r2, [pc, #328]	; (80024d4 <HAL_GPIO_Init+0x328>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d013      	beq.n	80023b8 <HAL_GPIO_Init+0x20c>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	4a51      	ldr	r2, [pc, #324]	; (80024d8 <HAL_GPIO_Init+0x32c>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d00d      	beq.n	80023b4 <HAL_GPIO_Init+0x208>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	4a50      	ldr	r2, [pc, #320]	; (80024dc <HAL_GPIO_Init+0x330>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d007      	beq.n	80023b0 <HAL_GPIO_Init+0x204>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	4a4f      	ldr	r2, [pc, #316]	; (80024e0 <HAL_GPIO_Init+0x334>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d101      	bne.n	80023ac <HAL_GPIO_Init+0x200>
 80023a8:	2308      	movs	r3, #8
 80023aa:	e010      	b.n	80023ce <HAL_GPIO_Init+0x222>
 80023ac:	2309      	movs	r3, #9
 80023ae:	e00e      	b.n	80023ce <HAL_GPIO_Init+0x222>
 80023b0:	2307      	movs	r3, #7
 80023b2:	e00c      	b.n	80023ce <HAL_GPIO_Init+0x222>
 80023b4:	2306      	movs	r3, #6
 80023b6:	e00a      	b.n	80023ce <HAL_GPIO_Init+0x222>
 80023b8:	2305      	movs	r3, #5
 80023ba:	e008      	b.n	80023ce <HAL_GPIO_Init+0x222>
 80023bc:	2304      	movs	r3, #4
 80023be:	e006      	b.n	80023ce <HAL_GPIO_Init+0x222>
 80023c0:	2303      	movs	r3, #3
 80023c2:	e004      	b.n	80023ce <HAL_GPIO_Init+0x222>
 80023c4:	2302      	movs	r3, #2
 80023c6:	e002      	b.n	80023ce <HAL_GPIO_Init+0x222>
 80023c8:	2301      	movs	r3, #1
 80023ca:	e000      	b.n	80023ce <HAL_GPIO_Init+0x222>
 80023cc:	2300      	movs	r3, #0
 80023ce:	697a      	ldr	r2, [r7, #20]
 80023d0:	f002 0203 	and.w	r2, r2, #3
 80023d4:	0092      	lsls	r2, r2, #2
 80023d6:	4093      	lsls	r3, r2
 80023d8:	461a      	mov	r2, r3
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	4313      	orrs	r3, r2
 80023de:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80023e0:	4936      	ldr	r1, [pc, #216]	; (80024bc <HAL_GPIO_Init+0x310>)
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	089b      	lsrs	r3, r3, #2
 80023e6:	3302      	adds	r3, #2
 80023e8:	693a      	ldr	r2, [r7, #16]
 80023ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023ee:	4b3d      	ldr	r3, [pc, #244]	; (80024e4 <HAL_GPIO_Init+0x338>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	43db      	mvns	r3, r3
 80023f8:	693a      	ldr	r2, [r7, #16]
 80023fa:	4013      	ands	r3, r2
 80023fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d003      	beq.n	8002412 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800240a:	693a      	ldr	r2, [r7, #16]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	4313      	orrs	r3, r2
 8002410:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002412:	4a34      	ldr	r2, [pc, #208]	; (80024e4 <HAL_GPIO_Init+0x338>)
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002418:	4b32      	ldr	r3, [pc, #200]	; (80024e4 <HAL_GPIO_Init+0x338>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	43db      	mvns	r3, r3
 8002422:	693a      	ldr	r2, [r7, #16]
 8002424:	4013      	ands	r3, r2
 8002426:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d003      	beq.n	800243c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002434:	693a      	ldr	r2, [r7, #16]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	4313      	orrs	r3, r2
 800243a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800243c:	4a29      	ldr	r2, [pc, #164]	; (80024e4 <HAL_GPIO_Init+0x338>)
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002442:	4b28      	ldr	r3, [pc, #160]	; (80024e4 <HAL_GPIO_Init+0x338>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	43db      	mvns	r3, r3
 800244c:	693a      	ldr	r2, [r7, #16]
 800244e:	4013      	ands	r3, r2
 8002450:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d003      	beq.n	8002466 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800245e:	693a      	ldr	r2, [r7, #16]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	4313      	orrs	r3, r2
 8002464:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002466:	4a1f      	ldr	r2, [pc, #124]	; (80024e4 <HAL_GPIO_Init+0x338>)
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800246c:	4b1d      	ldr	r3, [pc, #116]	; (80024e4 <HAL_GPIO_Init+0x338>)
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	43db      	mvns	r3, r3
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	4013      	ands	r3, r2
 800247a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d003      	beq.n	8002490 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8002488:	693a      	ldr	r2, [r7, #16]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	4313      	orrs	r3, r2
 800248e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002490:	4a14      	ldr	r2, [pc, #80]	; (80024e4 <HAL_GPIO_Init+0x338>)
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	3301      	adds	r3, #1
 800249a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	fa22 f303 	lsr.w	r3, r2, r3
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	f47f ae88 	bne.w	80021bc <HAL_GPIO_Init+0x10>
  }
}
 80024ac:	bf00      	nop
 80024ae:	bf00      	nop
 80024b0:	371c      	adds	r7, #28
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bc80      	pop	{r7}
 80024b6:	4770      	bx	lr
 80024b8:	40023800 	.word	0x40023800
 80024bc:	40013800 	.word	0x40013800
 80024c0:	40020000 	.word	0x40020000
 80024c4:	40020400 	.word	0x40020400
 80024c8:	40020800 	.word	0x40020800
 80024cc:	40020c00 	.word	0x40020c00
 80024d0:	40021000 	.word	0x40021000
 80024d4:	40021400 	.word	0x40021400
 80024d8:	40021800 	.word	0x40021800
 80024dc:	40021c00 	.word	0x40021c00
 80024e0:	40022000 	.word	0x40022000
 80024e4:	40013c00 	.word	0x40013c00

080024e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	460b      	mov	r3, r1
 80024f2:	807b      	strh	r3, [r7, #2]
 80024f4:	4613      	mov	r3, r2
 80024f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024f8:	787b      	ldrb	r3, [r7, #1]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d003      	beq.n	8002506 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024fe:	887a      	ldrh	r2, [r7, #2]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002504:	e003      	b.n	800250e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002506:	887b      	ldrh	r3, [r7, #2]
 8002508:	041a      	lsls	r2, r3, #16
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	619a      	str	r2, [r3, #24]
}
 800250e:	bf00      	nop
 8002510:	370c      	adds	r7, #12
 8002512:	46bd      	mov	sp, r7
 8002514:	bc80      	pop	{r7}
 8002516:	4770      	bx	lr

08002518 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..I) to select the GPIO peripheral. 
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002518:	b480      	push	{r7}
 800251a:	b085      	sub	sp, #20
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	460b      	mov	r3, r1
 8002522:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	695b      	ldr	r3, [r3, #20]
 8002528:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800252a:	887a      	ldrh	r2, [r7, #2]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	4013      	ands	r3, r2
 8002530:	041a      	lsls	r2, r3, #16
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	43d9      	mvns	r1, r3
 8002536:	887b      	ldrh	r3, [r7, #2]
 8002538:	400b      	ands	r3, r1
 800253a:	431a      	orrs	r2, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	619a      	str	r2, [r3, #24]
}
 8002540:	bf00      	nop
 8002542:	3714      	adds	r7, #20
 8002544:	46bd      	mov	sp, r7
 8002546:	bc80      	pop	{r7}
 8002548:	4770      	bx	lr
	...

0800254c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b08a      	sub	sp, #40	; 0x28
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d101      	bne.n	800255e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e237      	b.n	80029ce <HAL_RCC_OscConfig+0x482>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	2b00      	cmp	r3, #0
 8002568:	d050      	beq.n	800260c <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800256a:	4ba3      	ldr	r3, [pc, #652]	; (80027f8 <HAL_RCC_OscConfig+0x2ac>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f003 030c 	and.w	r3, r3, #12
 8002572:	2b04      	cmp	r3, #4
 8002574:	d00c      	beq.n	8002590 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002576:	4ba0      	ldr	r3, [pc, #640]	; (80027f8 <HAL_RCC_OscConfig+0x2ac>)
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800257e:	2b08      	cmp	r3, #8
 8002580:	d112      	bne.n	80025a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002582:	4b9d      	ldr	r3, [pc, #628]	; (80027f8 <HAL_RCC_OscConfig+0x2ac>)
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800258a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800258e:	d10b      	bne.n	80025a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002590:	4b99      	ldr	r3, [pc, #612]	; (80027f8 <HAL_RCC_OscConfig+0x2ac>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d036      	beq.n	800260a <HAL_RCC_OscConfig+0xbe>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d132      	bne.n	800260a <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e212      	b.n	80029ce <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685a      	ldr	r2, [r3, #4]
 80025ac:	4b93      	ldr	r3, [pc, #588]	; (80027fc <HAL_RCC_OscConfig+0x2b0>)
 80025ae:	b2d2      	uxtb	r2, r2
 80025b0:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d013      	beq.n	80025e2 <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ba:	f7fe fe8b 	bl	80012d4 <HAL_GetTick>
 80025be:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025c0:	e008      	b.n	80025d4 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025c2:	f7fe fe87 	bl	80012d4 <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	6a3b      	ldr	r3, [r7, #32]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	2b64      	cmp	r3, #100	; 0x64
 80025ce:	d901      	bls.n	80025d4 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	e1fc      	b.n	80029ce <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025d4:	4b88      	ldr	r3, [pc, #544]	; (80027f8 <HAL_RCC_OscConfig+0x2ac>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d0f0      	beq.n	80025c2 <HAL_RCC_OscConfig+0x76>
 80025e0:	e014      	b.n	800260c <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e2:	f7fe fe77 	bl	80012d4 <HAL_GetTick>
 80025e6:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025e8:	e008      	b.n	80025fc <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025ea:	f7fe fe73 	bl	80012d4 <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	6a3b      	ldr	r3, [r7, #32]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	2b64      	cmp	r3, #100	; 0x64
 80025f6:	d901      	bls.n	80025fc <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 80025f8:	2303      	movs	r3, #3
 80025fa:	e1e8      	b.n	80029ce <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025fc:	4b7e      	ldr	r3, [pc, #504]	; (80027f8 <HAL_RCC_OscConfig+0x2ac>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d1f0      	bne.n	80025ea <HAL_RCC_OscConfig+0x9e>
 8002608:	e000      	b.n	800260c <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800260a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0302 	and.w	r3, r3, #2
 8002614:	2b00      	cmp	r3, #0
 8002616:	d077      	beq.n	8002708 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002618:	4b77      	ldr	r3, [pc, #476]	; (80027f8 <HAL_RCC_OscConfig+0x2ac>)
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f003 030c 	and.w	r3, r3, #12
 8002620:	2b00      	cmp	r3, #0
 8002622:	d00b      	beq.n	800263c <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002624:	4b74      	ldr	r3, [pc, #464]	; (80027f8 <HAL_RCC_OscConfig+0x2ac>)
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800262c:	2b08      	cmp	r3, #8
 800262e:	d126      	bne.n	800267e <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002630:	4b71      	ldr	r3, [pc, #452]	; (80027f8 <HAL_RCC_OscConfig+0x2ac>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d120      	bne.n	800267e <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800263c:	4b6e      	ldr	r3, [pc, #440]	; (80027f8 <HAL_RCC_OscConfig+0x2ac>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0302 	and.w	r3, r3, #2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d005      	beq.n	8002654 <HAL_RCC_OscConfig+0x108>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	2b01      	cmp	r3, #1
 800264e:	d001      	beq.n	8002654 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e1bc      	b.n	80029ce <HAL_RCC_OscConfig+0x482>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002654:	4b68      	ldr	r3, [pc, #416]	; (80027f8 <HAL_RCC_OscConfig+0x2ac>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	691b      	ldr	r3, [r3, #16]
 8002660:	21f8      	movs	r1, #248	; 0xf8
 8002662:	61b9      	str	r1, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002664:	69b9      	ldr	r1, [r7, #24]
 8002666:	fa91 f1a1 	rbit	r1, r1
 800266a:	6179      	str	r1, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800266c:	6979      	ldr	r1, [r7, #20]
 800266e:	fab1 f181 	clz	r1, r1
 8002672:	b2c9      	uxtb	r1, r1
 8002674:	408b      	lsls	r3, r1
 8002676:	4960      	ldr	r1, [pc, #384]	; (80027f8 <HAL_RCC_OscConfig+0x2ac>)
 8002678:	4313      	orrs	r3, r2
 800267a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800267c:	e044      	b.n	8002708 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d02a      	beq.n	80026dc <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002686:	4b5e      	ldr	r3, [pc, #376]	; (8002800 <HAL_RCC_OscConfig+0x2b4>)
 8002688:	2201      	movs	r2, #1
 800268a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800268c:	f7fe fe22 	bl	80012d4 <HAL_GetTick>
 8002690:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002692:	e008      	b.n	80026a6 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002694:	f7fe fe1e 	bl	80012d4 <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	6a3b      	ldr	r3, [r7, #32]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e193      	b.n	80029ce <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026a6:	4b54      	ldr	r3, [pc, #336]	; (80027f8 <HAL_RCC_OscConfig+0x2ac>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0302 	and.w	r3, r3, #2
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d0f0      	beq.n	8002694 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026b2:	4b51      	ldr	r3, [pc, #324]	; (80027f8 <HAL_RCC_OscConfig+0x2ac>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	691b      	ldr	r3, [r3, #16]
 80026be:	21f8      	movs	r1, #248	; 0xf8
 80026c0:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c2:	6939      	ldr	r1, [r7, #16]
 80026c4:	fa91 f1a1 	rbit	r1, r1
 80026c8:	60f9      	str	r1, [r7, #12]
  return result;
 80026ca:	68f9      	ldr	r1, [r7, #12]
 80026cc:	fab1 f181 	clz	r1, r1
 80026d0:	b2c9      	uxtb	r1, r1
 80026d2:	408b      	lsls	r3, r1
 80026d4:	4948      	ldr	r1, [pc, #288]	; (80027f8 <HAL_RCC_OscConfig+0x2ac>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	600b      	str	r3, [r1, #0]
 80026da:	e015      	b.n	8002708 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026dc:	4b48      	ldr	r3, [pc, #288]	; (8002800 <HAL_RCC_OscConfig+0x2b4>)
 80026de:	2200      	movs	r2, #0
 80026e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e2:	f7fe fdf7 	bl	80012d4 <HAL_GetTick>
 80026e6:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026e8:	e008      	b.n	80026fc <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026ea:	f7fe fdf3 	bl	80012d4 <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	6a3b      	ldr	r3, [r7, #32]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d901      	bls.n	80026fc <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e168      	b.n	80029ce <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026fc:	4b3e      	ldr	r3, [pc, #248]	; (80027f8 <HAL_RCC_OscConfig+0x2ac>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0302 	and.w	r3, r3, #2
 8002704:	2b00      	cmp	r3, #0
 8002706:	d1f0      	bne.n	80026ea <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0308 	and.w	r3, r3, #8
 8002710:	2b00      	cmp	r3, #0
 8002712:	d030      	beq.n	8002776 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	695b      	ldr	r3, [r3, #20]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d016      	beq.n	800274a <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800271c:	4b39      	ldr	r3, [pc, #228]	; (8002804 <HAL_RCC_OscConfig+0x2b8>)
 800271e:	2201      	movs	r2, #1
 8002720:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002722:	f7fe fdd7 	bl	80012d4 <HAL_GetTick>
 8002726:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002728:	e008      	b.n	800273c <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800272a:	f7fe fdd3 	bl	80012d4 <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	6a3b      	ldr	r3, [r7, #32]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	2b02      	cmp	r3, #2
 8002736:	d901      	bls.n	800273c <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e148      	b.n	80029ce <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800273c:	4b2e      	ldr	r3, [pc, #184]	; (80027f8 <HAL_RCC_OscConfig+0x2ac>)
 800273e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002740:	f003 0302 	and.w	r3, r3, #2
 8002744:	2b00      	cmp	r3, #0
 8002746:	d0f0      	beq.n	800272a <HAL_RCC_OscConfig+0x1de>
 8002748:	e015      	b.n	8002776 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800274a:	4b2e      	ldr	r3, [pc, #184]	; (8002804 <HAL_RCC_OscConfig+0x2b8>)
 800274c:	2200      	movs	r2, #0
 800274e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002750:	f7fe fdc0 	bl	80012d4 <HAL_GetTick>
 8002754:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002756:	e008      	b.n	800276a <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002758:	f7fe fdbc 	bl	80012d4 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	6a3b      	ldr	r3, [r7, #32]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b02      	cmp	r3, #2
 8002764:	d901      	bls.n	800276a <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e131      	b.n	80029ce <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800276a:	4b23      	ldr	r3, [pc, #140]	; (80027f8 <HAL_RCC_OscConfig+0x2ac>)
 800276c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	2b00      	cmp	r3, #0
 8002774:	d1f0      	bne.n	8002758 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0304 	and.w	r3, r3, #4
 800277e:	2b00      	cmp	r3, #0
 8002780:	f000 8088 	beq.w	8002894 <HAL_RCC_OscConfig+0x348>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002784:	2300      	movs	r3, #0
 8002786:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800278a:	4b1b      	ldr	r3, [pc, #108]	; (80027f8 <HAL_RCC_OscConfig+0x2ac>)
 800278c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d110      	bne.n	80027b8 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002796:	2300      	movs	r3, #0
 8002798:	60bb      	str	r3, [r7, #8]
 800279a:	4b17      	ldr	r3, [pc, #92]	; (80027f8 <HAL_RCC_OscConfig+0x2ac>)
 800279c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279e:	4a16      	ldr	r2, [pc, #88]	; (80027f8 <HAL_RCC_OscConfig+0x2ac>)
 80027a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027a4:	6413      	str	r3, [r2, #64]	; 0x40
 80027a6:	4b14      	ldr	r3, [pc, #80]	; (80027f8 <HAL_RCC_OscConfig+0x2ac>)
 80027a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ae:	60bb      	str	r3, [r7, #8]
 80027b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027b2:	2301      	movs	r3, #1
 80027b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80027b8:	4b13      	ldr	r3, [pc, #76]	; (8002808 <HAL_RCC_OscConfig+0x2bc>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a12      	ldr	r2, [pc, #72]	; (8002808 <HAL_RCC_OscConfig+0x2bc>)
 80027be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027c2:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027c4:	4b10      	ldr	r3, [pc, #64]	; (8002808 <HAL_RCC_OscConfig+0x2bc>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d123      	bne.n	8002818 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027d0:	4b0d      	ldr	r3, [pc, #52]	; (8002808 <HAL_RCC_OscConfig+0x2bc>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a0c      	ldr	r2, [pc, #48]	; (8002808 <HAL_RCC_OscConfig+0x2bc>)
 80027d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027da:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027dc:	f7fe fd7a 	bl	80012d4 <HAL_GetTick>
 80027e0:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027e2:	e013      	b.n	800280c <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027e4:	f7fe fd76 	bl	80012d4 <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	6a3b      	ldr	r3, [r7, #32]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d90c      	bls.n	800280c <HAL_RCC_OscConfig+0x2c0>
        {
          return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e0eb      	b.n	80029ce <HAL_RCC_OscConfig+0x482>
 80027f6:	bf00      	nop
 80027f8:	40023800 	.word	0x40023800
 80027fc:	40023802 	.word	0x40023802
 8002800:	42470000 	.word	0x42470000
 8002804:	42470e80 	.word	0x42470e80
 8002808:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800280c:	4b72      	ldr	r3, [pc, #456]	; (80029d8 <HAL_RCC_OscConfig+0x48c>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002814:	2b00      	cmp	r3, #0
 8002816:	d0e5      	beq.n	80027e4 <HAL_RCC_OscConfig+0x298>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	689a      	ldr	r2, [r3, #8]
 800281c:	4b6f      	ldr	r3, [pc, #444]	; (80029dc <HAL_RCC_OscConfig+0x490>)
 800281e:	b2d2      	uxtb	r2, r2
 8002820:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d015      	beq.n	8002856 <HAL_RCC_OscConfig+0x30a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800282a:	f7fe fd53 	bl	80012d4 <HAL_GetTick>
 800282e:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002830:	e00a      	b.n	8002848 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002832:	f7fe fd4f 	bl	80012d4 <HAL_GetTick>
 8002836:	4602      	mov	r2, r0
 8002838:	6a3b      	ldr	r3, [r7, #32]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002840:	4293      	cmp	r3, r2
 8002842:	d901      	bls.n	8002848 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e0c2      	b.n	80029ce <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002848:	4b65      	ldr	r3, [pc, #404]	; (80029e0 <HAL_RCC_OscConfig+0x494>)
 800284a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800284c:	f003 0302 	and.w	r3, r3, #2
 8002850:	2b00      	cmp	r3, #0
 8002852:	d0ee      	beq.n	8002832 <HAL_RCC_OscConfig+0x2e6>
 8002854:	e014      	b.n	8002880 <HAL_RCC_OscConfig+0x334>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002856:	f7fe fd3d 	bl	80012d4 <HAL_GetTick>
 800285a:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800285c:	e00a      	b.n	8002874 <HAL_RCC_OscConfig+0x328>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800285e:	f7fe fd39 	bl	80012d4 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	6a3b      	ldr	r3, [r7, #32]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	f241 3288 	movw	r2, #5000	; 0x1388
 800286c:	4293      	cmp	r3, r2
 800286e:	d901      	bls.n	8002874 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e0ac      	b.n	80029ce <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002874:	4b5a      	ldr	r3, [pc, #360]	; (80029e0 <HAL_RCC_OscConfig+0x494>)
 8002876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002878:	f003 0302 	and.w	r3, r3, #2
 800287c:	2b00      	cmp	r3, #0
 800287e:	d1ee      	bne.n	800285e <HAL_RCC_OscConfig+0x312>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002880:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002884:	2b01      	cmp	r3, #1
 8002886:	d105      	bne.n	8002894 <HAL_RCC_OscConfig+0x348>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002888:	4b55      	ldr	r3, [pc, #340]	; (80029e0 <HAL_RCC_OscConfig+0x494>)
 800288a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288c:	4a54      	ldr	r2, [pc, #336]	; (80029e0 <HAL_RCC_OscConfig+0x494>)
 800288e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002892:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	699b      	ldr	r3, [r3, #24]
 8002898:	2b00      	cmp	r3, #0
 800289a:	f000 8097 	beq.w	80029cc <HAL_RCC_OscConfig+0x480>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800289e:	4b50      	ldr	r3, [pc, #320]	; (80029e0 <HAL_RCC_OscConfig+0x494>)
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	f003 030c 	and.w	r3, r3, #12
 80028a6:	2b08      	cmp	r3, #8
 80028a8:	d061      	beq.n	800296e <HAL_RCC_OscConfig+0x422>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	699b      	ldr	r3, [r3, #24]
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d146      	bne.n	8002940 <HAL_RCC_OscConfig+0x3f4>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028b2:	4b4c      	ldr	r3, [pc, #304]	; (80029e4 <HAL_RCC_OscConfig+0x498>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b8:	f7fe fd0c 	bl	80012d4 <HAL_GetTick>
 80028bc:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028be:	e008      	b.n	80028d2 <HAL_RCC_OscConfig+0x386>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028c0:	f7fe fd08 	bl	80012d4 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	6a3b      	ldr	r3, [r7, #32]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b64      	cmp	r3, #100	; 0x64
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0x386>
          {
            return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e07d      	b.n	80029ce <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028d2:	4b43      	ldr	r3, [pc, #268]	; (80029e0 <HAL_RCC_OscConfig+0x494>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1f0      	bne.n	80028c0 <HAL_RCC_OscConfig+0x374>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028de:	4b40      	ldr	r3, [pc, #256]	; (80029e0 <HAL_RCC_OscConfig+0x494>)
 80028e0:	685a      	ldr	r2, [r3, #4]
 80028e2:	4b41      	ldr	r3, [pc, #260]	; (80029e8 <HAL_RCC_OscConfig+0x49c>)
 80028e4:	4013      	ands	r3, r2
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	69d1      	ldr	r1, [r2, #28]
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	6a12      	ldr	r2, [r2, #32]
 80028ee:	4311      	orrs	r1, r2
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028f4:	0192      	lsls	r2, r2, #6
 80028f6:	4311      	orrs	r1, r2
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80028fc:	0612      	lsls	r2, r2, #24
 80028fe:	4311      	orrs	r1, r2
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002904:	0852      	lsrs	r2, r2, #1
 8002906:	3a01      	subs	r2, #1
 8002908:	0412      	lsls	r2, r2, #16
 800290a:	430a      	orrs	r2, r1
 800290c:	4934      	ldr	r1, [pc, #208]	; (80029e0 <HAL_RCC_OscConfig+0x494>)
 800290e:	4313      	orrs	r3, r2
 8002910:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002912:	4b34      	ldr	r3, [pc, #208]	; (80029e4 <HAL_RCC_OscConfig+0x498>)
 8002914:	2201      	movs	r2, #1
 8002916:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002918:	f7fe fcdc 	bl	80012d4 <HAL_GetTick>
 800291c:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800291e:	e008      	b.n	8002932 <HAL_RCC_OscConfig+0x3e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002920:	f7fe fcd8 	bl	80012d4 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	6a3b      	ldr	r3, [r7, #32]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b64      	cmp	r3, #100	; 0x64
 800292c:	d901      	bls.n	8002932 <HAL_RCC_OscConfig+0x3e6>
          {
            return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e04d      	b.n	80029ce <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002932:	4b2b      	ldr	r3, [pc, #172]	; (80029e0 <HAL_RCC_OscConfig+0x494>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d0f0      	beq.n	8002920 <HAL_RCC_OscConfig+0x3d4>
 800293e:	e045      	b.n	80029cc <HAL_RCC_OscConfig+0x480>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002940:	4b28      	ldr	r3, [pc, #160]	; (80029e4 <HAL_RCC_OscConfig+0x498>)
 8002942:	2200      	movs	r2, #0
 8002944:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002946:	f7fe fcc5 	bl	80012d4 <HAL_GetTick>
 800294a:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800294c:	e008      	b.n	8002960 <HAL_RCC_OscConfig+0x414>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800294e:	f7fe fcc1 	bl	80012d4 <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	6a3b      	ldr	r3, [r7, #32]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	2b64      	cmp	r3, #100	; 0x64
 800295a:	d901      	bls.n	8002960 <HAL_RCC_OscConfig+0x414>
          {
            return HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	e036      	b.n	80029ce <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002960:	4b1f      	ldr	r3, [pc, #124]	; (80029e0 <HAL_RCC_OscConfig+0x494>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d1f0      	bne.n	800294e <HAL_RCC_OscConfig+0x402>
 800296c:	e02e      	b.n	80029cc <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	699b      	ldr	r3, [r3, #24]
 8002972:	2b01      	cmp	r3, #1
 8002974:	d101      	bne.n	800297a <HAL_RCC_OscConfig+0x42e>
      {
        return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e029      	b.n	80029ce <HAL_RCC_OscConfig+0x482>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 800297a:	4b19      	ldr	r3, [pc, #100]	; (80029e0 <HAL_RCC_OscConfig+0x494>)
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	69db      	ldr	r3, [r3, #28]
 800298a:	429a      	cmp	r2, r3
 800298c:	d11c      	bne.n	80029c8 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002998:	429a      	cmp	r2, r3
 800299a:	d115      	bne.n	80029c8 <HAL_RCC_OscConfig+0x47c>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	099b      	lsrs	r3, r3, #6
 80029a0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d10d      	bne.n	80029c8 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d106      	bne.n	80029c8 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d001      	beq.n	80029cc <HAL_RCC_OscConfig+0x480>
        {
          return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e000      	b.n	80029ce <HAL_RCC_OscConfig+0x482>
        }
      }
    }
  }
  return HAL_OK;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3728      	adds	r7, #40	; 0x28
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	40007000 	.word	0x40007000
 80029dc:	40023870 	.word	0x40023870
 80029e0:	40023800 	.word	0x40023800
 80029e4:	42470060 	.word	0x42470060
 80029e8:	f0bc8000 	.word	0xf0bc8000

080029ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b086      	sub	sp, #24
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d101      	bne.n	8002a00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e0d2      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a00:	4b6b      	ldr	r3, [pc, #428]	; (8002bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 030f 	and.w	r3, r3, #15
 8002a08:	683a      	ldr	r2, [r7, #0]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d90c      	bls.n	8002a28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a0e:	4b68      	ldr	r3, [pc, #416]	; (8002bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a10:	683a      	ldr	r2, [r7, #0]
 8002a12:	b2d2      	uxtb	r2, r2
 8002a14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a16:	4b66      	ldr	r3, [pc, #408]	; (8002bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 030f 	and.w	r3, r3, #15
 8002a1e:	683a      	ldr	r2, [r7, #0]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d001      	beq.n	8002a28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e0be      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0302 	and.w	r3, r3, #2
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d020      	beq.n	8002a76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0304 	and.w	r3, r3, #4
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d005      	beq.n	8002a4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a40:	4b5c      	ldr	r3, [pc, #368]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	4a5b      	ldr	r2, [pc, #364]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002a46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a4a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0308 	and.w	r3, r3, #8
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d005      	beq.n	8002a64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8002a58:	4b56      	ldr	r3, [pc, #344]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	4a55      	ldr	r2, [pc, #340]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002a5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a62:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a64:	4b53      	ldr	r3, [pc, #332]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	4950      	ldr	r1, [pc, #320]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0301 	and.w	r3, r3, #1
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d040      	beq.n	8002b04 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d107      	bne.n	8002a9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a8a:	4b4a      	ldr	r3, [pc, #296]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d115      	bne.n	8002ac2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e085      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d107      	bne.n	8002ab2 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aa2:	4b44      	ldr	r3, [pc, #272]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d109      	bne.n	8002ac2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e079      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ab2:	4b40      	ldr	r3, [pc, #256]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0302 	and.w	r3, r3, #2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d101      	bne.n	8002ac2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e071      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ac2:	4b3c      	ldr	r3, [pc, #240]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f023 0203 	bic.w	r2, r3, #3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	4939      	ldr	r1, [pc, #228]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ad4:	f7fe fbfe 	bl	80012d4 <HAL_GetTick>
 8002ad8:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ada:	e00a      	b.n	8002af2 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002adc:	f7fe fbfa 	bl	80012d4 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d901      	bls.n	8002af2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e059      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002af2:	4b30      	ldr	r3, [pc, #192]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f003 020c 	and.w	r2, r3, #12
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d1eb      	bne.n	8002adc <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b04:	4b2a      	ldr	r3, [pc, #168]	; (8002bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 030f 	and.w	r3, r3, #15
 8002b0c:	683a      	ldr	r2, [r7, #0]
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d20c      	bcs.n	8002b2c <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b12:	4b27      	ldr	r3, [pc, #156]	; (8002bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b14:	683a      	ldr	r2, [r7, #0]
 8002b16:	b2d2      	uxtb	r2, r2
 8002b18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b1a:	4b25      	ldr	r3, [pc, #148]	; (8002bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 030f 	and.w	r3, r3, #15
 8002b22:	683a      	ldr	r2, [r7, #0]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d001      	beq.n	8002b2c <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e03c      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0304 	and.w	r3, r3, #4
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d008      	beq.n	8002b4a <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b38:	4b1e      	ldr	r3, [pc, #120]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	491b      	ldr	r1, [pc, #108]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0308 	and.w	r3, r3, #8
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d009      	beq.n	8002b6a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b56:	4b17      	ldr	r3, [pc, #92]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	691b      	ldr	r3, [r3, #16]
 8002b62:	00db      	lsls	r3, r3, #3
 8002b64:	4913      	ldr	r1, [pc, #76]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8002b6a:	f000 f82b 	bl	8002bc4 <HAL_RCC_GetSysClockFreq>
 8002b6e:	4601      	mov	r1, r0
 8002b70:	4b10      	ldr	r3, [pc, #64]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b78:	22f0      	movs	r2, #240	; 0xf0
 8002b7a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7c:	693a      	ldr	r2, [r7, #16]
 8002b7e:	fa92 f2a2 	rbit	r2, r2
 8002b82:	60fa      	str	r2, [r7, #12]
  return result;
 8002b84:	68fa      	ldr	r2, [r7, #12]
 8002b86:	fab2 f282 	clz	r2, r2
 8002b8a:	b2d2      	uxtb	r2, r2
 8002b8c:	40d3      	lsrs	r3, r2
 8002b8e:	4a0a      	ldr	r2, [pc, #40]	; (8002bb8 <HAL_RCC_ClockConfig+0x1cc>)
 8002b90:	5cd3      	ldrb	r3, [r2, r3]
 8002b92:	fa21 f303 	lsr.w	r3, r1, r3
 8002b96:	4a09      	ldr	r2, [pc, #36]	; (8002bbc <HAL_RCC_ClockConfig+0x1d0>)
 8002b98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b9a:	4b09      	ldr	r3, [pc, #36]	; (8002bc0 <HAL_RCC_ClockConfig+0x1d4>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7fe fb56 	bl	8001250 <HAL_InitTick>

  return HAL_OK;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3718      	adds	r7, #24
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	40023c00 	.word	0x40023c00
 8002bb4:	40023800 	.word	0x40023800
 8002bb8:	08003104 	.word	0x08003104
 8002bbc:	20000000 	.word	0x20000000
 8002bc0:	20000004 	.word	0x20000004

08002bc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bc4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002bc8:	b084      	sub	sp, #16
 8002bca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	607b      	str	r3, [r7, #4]
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	60fb      	str	r3, [r7, #12]
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bdc:	4b67      	ldr	r3, [pc, #412]	; (8002d7c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f003 030c 	and.w	r3, r3, #12
 8002be4:	2b08      	cmp	r3, #8
 8002be6:	d00d      	beq.n	8002c04 <HAL_RCC_GetSysClockFreq+0x40>
 8002be8:	2b08      	cmp	r3, #8
 8002bea:	f200 80bd 	bhi.w	8002d68 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d002      	beq.n	8002bf8 <HAL_RCC_GetSysClockFreq+0x34>
 8002bf2:	2b04      	cmp	r3, #4
 8002bf4:	d003      	beq.n	8002bfe <HAL_RCC_GetSysClockFreq+0x3a>
 8002bf6:	e0b7      	b.n	8002d68 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bf8:	4b61      	ldr	r3, [pc, #388]	; (8002d80 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002bfa:	60bb      	str	r3, [r7, #8]
       break;
 8002bfc:	e0b7      	b.n	8002d6e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bfe:	4b61      	ldr	r3, [pc, #388]	; (8002d84 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002c00:	60bb      	str	r3, [r7, #8]
      break;
 8002c02:	e0b4      	b.n	8002d6e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c04:	4b5d      	ldr	r3, [pc, #372]	; (8002d7c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c0c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c0e:	4b5b      	ldr	r3, [pc, #364]	; (8002d7c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d04d      	beq.n	8002cb6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c1a:	4b58      	ldr	r3, [pc, #352]	; (8002d7c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	099b      	lsrs	r3, r3, #6
 8002c20:	461a      	mov	r2, r3
 8002c22:	f04f 0300 	mov.w	r3, #0
 8002c26:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002c2a:	f04f 0100 	mov.w	r1, #0
 8002c2e:	ea02 0800 	and.w	r8, r2, r0
 8002c32:	ea03 0901 	and.w	r9, r3, r1
 8002c36:	4640      	mov	r0, r8
 8002c38:	4649      	mov	r1, r9
 8002c3a:	f04f 0200 	mov.w	r2, #0
 8002c3e:	f04f 0300 	mov.w	r3, #0
 8002c42:	014b      	lsls	r3, r1, #5
 8002c44:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002c48:	0142      	lsls	r2, r0, #5
 8002c4a:	4610      	mov	r0, r2
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	ebb0 0008 	subs.w	r0, r0, r8
 8002c52:	eb61 0109 	sbc.w	r1, r1, r9
 8002c56:	f04f 0200 	mov.w	r2, #0
 8002c5a:	f04f 0300 	mov.w	r3, #0
 8002c5e:	018b      	lsls	r3, r1, #6
 8002c60:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002c64:	0182      	lsls	r2, r0, #6
 8002c66:	1a12      	subs	r2, r2, r0
 8002c68:	eb63 0301 	sbc.w	r3, r3, r1
 8002c6c:	f04f 0000 	mov.w	r0, #0
 8002c70:	f04f 0100 	mov.w	r1, #0
 8002c74:	00d9      	lsls	r1, r3, #3
 8002c76:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c7a:	00d0      	lsls	r0, r2, #3
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	460b      	mov	r3, r1
 8002c80:	eb12 0208 	adds.w	r2, r2, r8
 8002c84:	eb43 0309 	adc.w	r3, r3, r9
 8002c88:	f04f 0000 	mov.w	r0, #0
 8002c8c:	f04f 0100 	mov.w	r1, #0
 8002c90:	0259      	lsls	r1, r3, #9
 8002c92:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002c96:	0250      	lsls	r0, r2, #9
 8002c98:	4602      	mov	r2, r0
 8002c9a:	460b      	mov	r3, r1
 8002c9c:	4610      	mov	r0, r2
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	f04f 0300 	mov.w	r3, #0
 8002ca8:	f7fd fd0a 	bl	80006c0 <__aeabi_uldivmod>
 8002cac:	4602      	mov	r2, r0
 8002cae:	460b      	mov	r3, r1
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	60fb      	str	r3, [r7, #12]
 8002cb4:	e04a      	b.n	8002d4c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cb6:	4b31      	ldr	r3, [pc, #196]	; (8002d7c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	099b      	lsrs	r3, r3, #6
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	f04f 0300 	mov.w	r3, #0
 8002cc2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002cc6:	f04f 0100 	mov.w	r1, #0
 8002cca:	ea02 0400 	and.w	r4, r2, r0
 8002cce:	ea03 0501 	and.w	r5, r3, r1
 8002cd2:	4620      	mov	r0, r4
 8002cd4:	4629      	mov	r1, r5
 8002cd6:	f04f 0200 	mov.w	r2, #0
 8002cda:	f04f 0300 	mov.w	r3, #0
 8002cde:	014b      	lsls	r3, r1, #5
 8002ce0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002ce4:	0142      	lsls	r2, r0, #5
 8002ce6:	4610      	mov	r0, r2
 8002ce8:	4619      	mov	r1, r3
 8002cea:	1b00      	subs	r0, r0, r4
 8002cec:	eb61 0105 	sbc.w	r1, r1, r5
 8002cf0:	f04f 0200 	mov.w	r2, #0
 8002cf4:	f04f 0300 	mov.w	r3, #0
 8002cf8:	018b      	lsls	r3, r1, #6
 8002cfa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002cfe:	0182      	lsls	r2, r0, #6
 8002d00:	1a12      	subs	r2, r2, r0
 8002d02:	eb63 0301 	sbc.w	r3, r3, r1
 8002d06:	f04f 0000 	mov.w	r0, #0
 8002d0a:	f04f 0100 	mov.w	r1, #0
 8002d0e:	00d9      	lsls	r1, r3, #3
 8002d10:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d14:	00d0      	lsls	r0, r2, #3
 8002d16:	4602      	mov	r2, r0
 8002d18:	460b      	mov	r3, r1
 8002d1a:	1912      	adds	r2, r2, r4
 8002d1c:	eb45 0303 	adc.w	r3, r5, r3
 8002d20:	f04f 0000 	mov.w	r0, #0
 8002d24:	f04f 0100 	mov.w	r1, #0
 8002d28:	0299      	lsls	r1, r3, #10
 8002d2a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002d2e:	0290      	lsls	r0, r2, #10
 8002d30:	4602      	mov	r2, r0
 8002d32:	460b      	mov	r3, r1
 8002d34:	4610      	mov	r0, r2
 8002d36:	4619      	mov	r1, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	f04f 0300 	mov.w	r3, #0
 8002d40:	f7fd fcbe 	bl	80006c0 <__aeabi_uldivmod>
 8002d44:	4602      	mov	r2, r0
 8002d46:	460b      	mov	r3, r1
 8002d48:	4613      	mov	r3, r2
 8002d4a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d4c:	4b0b      	ldr	r3, [pc, #44]	; (8002d7c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	0c1b      	lsrs	r3, r3, #16
 8002d52:	f003 0303 	and.w	r3, r3, #3
 8002d56:	3301      	adds	r3, #1
 8002d58:	005b      	lsls	r3, r3, #1
 8002d5a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002d5c:	68fa      	ldr	r2, [r7, #12]
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d64:	60bb      	str	r3, [r7, #8]
      break;
 8002d66:	e002      	b.n	8002d6e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d68:	4b05      	ldr	r3, [pc, #20]	; (8002d80 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002d6a:	60bb      	str	r3, [r7, #8]
      break;
 8002d6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d6e:	68bb      	ldr	r3, [r7, #8]
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3710      	adds	r7, #16
 8002d74:	46bd      	mov	sp, r7
 8002d76:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002d7a:	bf00      	nop
 8002d7c:	40023800 	.word	0x40023800
 8002d80:	00f42400 	.word	0x00f42400
 8002d84:	007a1200 	.word	0x007a1200

08002d88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d8c:	4b02      	ldr	r3, [pc, #8]	; (8002d98 <HAL_RCC_GetHCLKFreq+0x10>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bc80      	pop	{r7}
 8002d96:	4770      	bx	lr
 8002d98:	20000000 	.word	0x20000000

08002d9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8002da2:	f7ff fff1 	bl	8002d88 <HAL_RCC_GetHCLKFreq>
 8002da6:	4601      	mov	r1, r0
 8002da8:	4b0b      	ldr	r3, [pc, #44]	; (8002dd8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8002db0:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8002db4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	fa92 f2a2 	rbit	r2, r2
 8002dbc:	603a      	str	r2, [r7, #0]
  return result;
 8002dbe:	683a      	ldr	r2, [r7, #0]
 8002dc0:	fab2 f282 	clz	r2, r2
 8002dc4:	b2d2      	uxtb	r2, r2
 8002dc6:	40d3      	lsrs	r3, r2
 8002dc8:	4a04      	ldr	r2, [pc, #16]	; (8002ddc <HAL_RCC_GetPCLK1Freq+0x40>)
 8002dca:	5cd3      	ldrb	r3, [r2, r3]
 8002dcc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3708      	adds	r7, #8
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	40023800 	.word	0x40023800
 8002ddc:	08003114 	.word	0x08003114

08002de0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8002de6:	f7ff ffcf 	bl	8002d88 <HAL_RCC_GetHCLKFreq>
 8002dea:	4601      	mov	r1, r0
 8002dec:	4b0b      	ldr	r3, [pc, #44]	; (8002e1c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002df4:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8002df8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	fa92 f2a2 	rbit	r2, r2
 8002e00:	603a      	str	r2, [r7, #0]
  return result;
 8002e02:	683a      	ldr	r2, [r7, #0]
 8002e04:	fab2 f282 	clz	r2, r2
 8002e08:	b2d2      	uxtb	r2, r2
 8002e0a:	40d3      	lsrs	r3, r2
 8002e0c:	4a04      	ldr	r2, [pc, #16]	; (8002e20 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002e0e:	5cd3      	ldrb	r3, [r2, r3]
 8002e10:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3708      	adds	r7, #8
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	40023800 	.word	0x40023800
 8002e20:	08003114 	.word	0x08003114

08002e24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d101      	bne.n	8002e36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e03f      	b.n	8002eb6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d106      	bne.n	8002e50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f7fe f96c 	bl	8001128 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2224      	movs	r2, #36	; 0x24
 8002e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	68da      	ldr	r2, [r3, #12]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f000 f829 	bl	8002ec0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	691a      	ldr	r2, [r3, #16]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	695a      	ldr	r2, [r3, #20]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	68da      	ldr	r2, [r3, #12]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2220      	movs	r2, #32
 8002ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2220      	movs	r2, #32
 8002eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3708      	adds	r7, #8
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
	...

08002ec0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	68da      	ldr	r2, [r3, #12]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	430a      	orrs	r2, r1
 8002edc:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	689a      	ldr	r2, [r3, #8]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	431a      	orrs	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	695b      	ldr	r3, [r3, #20]
 8002eec:	431a      	orrs	r2, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	69db      	ldr	r3, [r3, #28]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002f00:	f023 030c 	bic.w	r3, r3, #12
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	6812      	ldr	r2, [r2, #0]
 8002f08:	68b9      	ldr	r1, [r7, #8]
 8002f0a:	430b      	orrs	r3, r1
 8002f0c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	695b      	ldr	r3, [r3, #20]
 8002f14:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	699a      	ldr	r2, [r3, #24]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	430a      	orrs	r2, r1
 8002f22:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a57      	ldr	r2, [pc, #348]	; (8003088 <UART_SetConfig+0x1c8>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d004      	beq.n	8002f38 <UART_SetConfig+0x78>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a56      	ldr	r2, [pc, #344]	; (800308c <UART_SetConfig+0x1cc>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d103      	bne.n	8002f40 <UART_SetConfig+0x80>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002f38:	f7ff ff52 	bl	8002de0 <HAL_RCC_GetPCLK2Freq>
 8002f3c:	60f8      	str	r0, [r7, #12]
 8002f3e:	e002      	b.n	8002f46 <UART_SetConfig+0x86>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002f40:	f7ff ff2c 	bl	8002d9c <HAL_RCC_GetPCLK1Freq>
 8002f44:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	69db      	ldr	r3, [r3, #28]
 8002f4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f4e:	d14c      	bne.n	8002fea <UART_SetConfig+0x12a>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f50:	68fa      	ldr	r2, [r7, #12]
 8002f52:	4613      	mov	r3, r2
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	4413      	add	r3, r2
 8002f58:	009a      	lsls	r2, r3, #2
 8002f5a:	441a      	add	r2, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	005b      	lsls	r3, r3, #1
 8002f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f66:	4a4a      	ldr	r2, [pc, #296]	; (8003090 <UART_SetConfig+0x1d0>)
 8002f68:	fba2 2303 	umull	r2, r3, r2, r3
 8002f6c:	095b      	lsrs	r3, r3, #5
 8002f6e:	0119      	lsls	r1, r3, #4
 8002f70:	68fa      	ldr	r2, [r7, #12]
 8002f72:	4613      	mov	r3, r2
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	4413      	add	r3, r2
 8002f78:	009a      	lsls	r2, r3, #2
 8002f7a:	441a      	add	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	005b      	lsls	r3, r3, #1
 8002f82:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f86:	4b42      	ldr	r3, [pc, #264]	; (8003090 <UART_SetConfig+0x1d0>)
 8002f88:	fba3 0302 	umull	r0, r3, r3, r2
 8002f8c:	095b      	lsrs	r3, r3, #5
 8002f8e:	2064      	movs	r0, #100	; 0x64
 8002f90:	fb00 f303 	mul.w	r3, r0, r3
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	00db      	lsls	r3, r3, #3
 8002f98:	3332      	adds	r3, #50	; 0x32
 8002f9a:	4a3d      	ldr	r2, [pc, #244]	; (8003090 <UART_SetConfig+0x1d0>)
 8002f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa0:	095b      	lsrs	r3, r3, #5
 8002fa2:	005b      	lsls	r3, r3, #1
 8002fa4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002fa8:	4419      	add	r1, r3
 8002faa:	68fa      	ldr	r2, [r7, #12]
 8002fac:	4613      	mov	r3, r2
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	4413      	add	r3, r2
 8002fb2:	009a      	lsls	r2, r3, #2
 8002fb4:	441a      	add	r2, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fc0:	4b33      	ldr	r3, [pc, #204]	; (8003090 <UART_SetConfig+0x1d0>)
 8002fc2:	fba3 0302 	umull	r0, r3, r3, r2
 8002fc6:	095b      	lsrs	r3, r3, #5
 8002fc8:	2064      	movs	r0, #100	; 0x64
 8002fca:	fb00 f303 	mul.w	r3, r0, r3
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	00db      	lsls	r3, r3, #3
 8002fd2:	3332      	adds	r3, #50	; 0x32
 8002fd4:	4a2e      	ldr	r2, [pc, #184]	; (8003090 <UART_SetConfig+0x1d0>)
 8002fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fda:	095b      	lsrs	r3, r3, #5
 8002fdc:	f003 0207 	and.w	r2, r3, #7
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	440a      	add	r2, r1
 8002fe6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002fe8:	e04a      	b.n	8003080 <UART_SetConfig+0x1c0>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002fea:	68fa      	ldr	r2, [r7, #12]
 8002fec:	4613      	mov	r3, r2
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	4413      	add	r3, r2
 8002ff2:	009a      	lsls	r2, r3, #2
 8002ff4:	441a      	add	r2, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003000:	4a23      	ldr	r2, [pc, #140]	; (8003090 <UART_SetConfig+0x1d0>)
 8003002:	fba2 2303 	umull	r2, r3, r2, r3
 8003006:	095b      	lsrs	r3, r3, #5
 8003008:	0119      	lsls	r1, r3, #4
 800300a:	68fa      	ldr	r2, [r7, #12]
 800300c:	4613      	mov	r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	4413      	add	r3, r2
 8003012:	009a      	lsls	r2, r3, #2
 8003014:	441a      	add	r2, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003020:	4b1b      	ldr	r3, [pc, #108]	; (8003090 <UART_SetConfig+0x1d0>)
 8003022:	fba3 0302 	umull	r0, r3, r3, r2
 8003026:	095b      	lsrs	r3, r3, #5
 8003028:	2064      	movs	r0, #100	; 0x64
 800302a:	fb00 f303 	mul.w	r3, r0, r3
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	011b      	lsls	r3, r3, #4
 8003032:	3332      	adds	r3, #50	; 0x32
 8003034:	4a16      	ldr	r2, [pc, #88]	; (8003090 <UART_SetConfig+0x1d0>)
 8003036:	fba2 2303 	umull	r2, r3, r2, r3
 800303a:	095b      	lsrs	r3, r3, #5
 800303c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003040:	4419      	add	r1, r3
 8003042:	68fa      	ldr	r2, [r7, #12]
 8003044:	4613      	mov	r3, r2
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	4413      	add	r3, r2
 800304a:	009a      	lsls	r2, r3, #2
 800304c:	441a      	add	r2, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	fbb2 f2f3 	udiv	r2, r2, r3
 8003058:	4b0d      	ldr	r3, [pc, #52]	; (8003090 <UART_SetConfig+0x1d0>)
 800305a:	fba3 0302 	umull	r0, r3, r3, r2
 800305e:	095b      	lsrs	r3, r3, #5
 8003060:	2064      	movs	r0, #100	; 0x64
 8003062:	fb00 f303 	mul.w	r3, r0, r3
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	011b      	lsls	r3, r3, #4
 800306a:	3332      	adds	r3, #50	; 0x32
 800306c:	4a08      	ldr	r2, [pc, #32]	; (8003090 <UART_SetConfig+0x1d0>)
 800306e:	fba2 2303 	umull	r2, r3, r2, r3
 8003072:	095b      	lsrs	r3, r3, #5
 8003074:	f003 020f 	and.w	r2, r3, #15
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	440a      	add	r2, r1
 800307e:	609a      	str	r2, [r3, #8]
}
 8003080:	bf00      	nop
 8003082:	3710      	adds	r7, #16
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	40011000 	.word	0x40011000
 800308c:	40011400 	.word	0x40011400
 8003090:	51eb851f 	.word	0x51eb851f

08003094 <__libc_init_array>:
 8003094:	b570      	push	{r4, r5, r6, lr}
 8003096:	2600      	movs	r6, #0
 8003098:	4d0c      	ldr	r5, [pc, #48]	; (80030cc <__libc_init_array+0x38>)
 800309a:	4c0d      	ldr	r4, [pc, #52]	; (80030d0 <__libc_init_array+0x3c>)
 800309c:	1b64      	subs	r4, r4, r5
 800309e:	10a4      	asrs	r4, r4, #2
 80030a0:	42a6      	cmp	r6, r4
 80030a2:	d109      	bne.n	80030b8 <__libc_init_array+0x24>
 80030a4:	f000 f822 	bl	80030ec <_init>
 80030a8:	2600      	movs	r6, #0
 80030aa:	4d0a      	ldr	r5, [pc, #40]	; (80030d4 <__libc_init_array+0x40>)
 80030ac:	4c0a      	ldr	r4, [pc, #40]	; (80030d8 <__libc_init_array+0x44>)
 80030ae:	1b64      	subs	r4, r4, r5
 80030b0:	10a4      	asrs	r4, r4, #2
 80030b2:	42a6      	cmp	r6, r4
 80030b4:	d105      	bne.n	80030c2 <__libc_init_array+0x2e>
 80030b6:	bd70      	pop	{r4, r5, r6, pc}
 80030b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80030bc:	4798      	blx	r3
 80030be:	3601      	adds	r6, #1
 80030c0:	e7ee      	b.n	80030a0 <__libc_init_array+0xc>
 80030c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80030c6:	4798      	blx	r3
 80030c8:	3601      	adds	r6, #1
 80030ca:	e7f2      	b.n	80030b2 <__libc_init_array+0x1e>
 80030cc:	08003124 	.word	0x08003124
 80030d0:	08003124 	.word	0x08003124
 80030d4:	08003124 	.word	0x08003124
 80030d8:	08003128 	.word	0x08003128

080030dc <memset>:
 80030dc:	4603      	mov	r3, r0
 80030de:	4402      	add	r2, r0
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d100      	bne.n	80030e6 <memset+0xa>
 80030e4:	4770      	bx	lr
 80030e6:	f803 1b01 	strb.w	r1, [r3], #1
 80030ea:	e7f9      	b.n	80030e0 <memset+0x4>

080030ec <_init>:
 80030ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ee:	bf00      	nop
 80030f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030f2:	bc08      	pop	{r3}
 80030f4:	469e      	mov	lr, r3
 80030f6:	4770      	bx	lr

080030f8 <_fini>:
 80030f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030fa:	bf00      	nop
 80030fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030fe:	bc08      	pop	{r3}
 8003100:	469e      	mov	lr, r3
 8003102:	4770      	bx	lr
